# Replace strings in all/selected files in a directory and optionally rename the files

dashboards_to_comment = [
    'AWS ACM Private CA',
    'AWS API Gateway',
    'AWS App Runner',
    'AWS App Stream',
    'AWS App Sync',
    'AWS Athena',
    'AWS Aurora',
    'AWS Auto Scaling',
    'AWS Billing',
    'AWS Cassandra',
    'AWS Chatbot',
    'AWS Cloud HSM',
    'AWS Cloud Search',
    'AWS Cloudfront',
    'AWS Code Build',
    'AWS Cognito',
    'AWS Connect',
    'AWS Container Insights',
    'AWS DAX',
    'AWS DMS',
    'AWS DX',
    'AWS Data Sync',
    'AWS DocDB',
    'AWS EC',
    'AWS EC2 API',
    'AWS ECS',
    'AWS EFS',
    'AWS EMR',
    'AWS ES',
    'AWS Elastic Beanstalk',
    'AWS Elastic Inference',
    'AWS Elastic Transcoder',
    'AWS Events',
    'AWS FSX',
    'AWS Gamelift',
    'AWS Glue',
    'AWS IOT',
    'AWS Inspector',
    'AWS Kafka 1',
    'AWS Kafka 2',
    'AWS Kafka 3',
    'AWS Kafka 4',
    'AWS Kinesis Data Analytics',
    'AWS Kinesis Data Firehose',
    'AWS Kinesis Data Streams',
    'AWS Kinesis Video Streams',
    'AWS Lex',
    'AWS Logs',
    'AWS MQ',
    'AWS MediaConnect',
    'AWS MediaConvert',
    'AWS MediaPackageLive',
    'AWS MediaPackageVOD',
    'AWS MediaTailor',
    'AWS NAT Gateways',
    'AWS Neptune',
    'AWS OpsWorks',
    'AWS Polly',
    'AWS QLDB',
    'AWS Redshift',
    'AWS Rekognition',
    'AWS Robomaker',
    'AWS Route 53',
    'AWS S3',
    'AWS SES',
    'AWS SNS',
    'AWS SQS',
    'AWS SSM Run Command',
    'AWS SWF',
    'AWS SageMaker',
    'AWS Service Catalog',
    'AWS Spotfleet',
    'AWS States',
    'AWS Storage Gateway',
    'AWS Textract',
    'AWS Transfer',
    'AWS Transit Gateway',
    'AWS Translate',
    'AWS Trusted Advisor',
    'AWS Usage',
    'AWS VPN',
    'AWS WAF',
    'AWS Workmail',
    'AWS Workspaces',
    'Active Directory Extension 1',
    'Active Directory Extension 2',
    'Active Directory Replication Extension',
    'Azure 7',
    'Azure 8',
    'Azure Express Route Circuits',
    'Azure Ext 1',
    'Azure Ext 2',
    'Azure Ext 3',
    'CICS',
    'Calculated Service Metrics A - M',
    'Calculated Service Metrics N - R',
    'Calculated Service Metrics S 1',
    'Calculated Service Metrics S 2',
    'Calculated Service Metrics S 3',
    'Calculated Service Metrics S 4',
    'Calculated Service Metrics S 5',
    'Calculated Service Metrics T - Z',
    'Calculated Synthetic Metrics',
    'Calculated Web Application Metrics',
    'Citrix',
    'Citrix Extension',
    'Cloud Hub',
    'Consul',
    'ControlM',
    'CoreDNS Extension',
    'Custom JMX Metrics 1',
    'Custom JMX Metrics 2',
    'Custom JMX Metrics 3',
    'Custom JMX Metrics 4',
    'Custom JMX Metrics 5',
    'Custom PMI Metrics',
    'Custom Scripts',
    'DB2',
    'DB2',
    'DB2',
    'Etcd',
    'F5 Metrics',
    'F5 Metrics 1',
    'F5 Metrics 2',
    'F5 Metrics 3',
    'Filechecker',
    'Filesystem',
    'GCP',
    'GCP Autoscaler',
    'GCP BigQuery',
    'GCP Cloud SQL',
    'GCP Google APIs Compute',
    'GCP Google APIs DNS',
    'GCP Google APIs Datastore',
    'GCP Google APIs Firestore',
    'GCP Google APIs Firewall Insights',
    'GCP Google APIs Load Balancing',
    'GCP Google APIs Logging 1',
    'GCP Google APIs Logging 2',
    'GCP Google APIs Networking',
    'GCP Google APIs Pub/Sub',
    'GCP Google APIs Router',
    'GCP Google APIs Run',
    'GCP Google APIs Service Runtime',
    'GCP Google APIs Storage',
    'GCP Google APIs VPN',
    'GCP Google APIs interconnect',
    'GCP Kubernetes IO Container',
    'GCP Kubernetes IO Node',
    'GCP Kubernetes IO Pod',
    'Galley',
    'Generic DB Query',
    'Generic Palo Alto Device',
    'Generic SNMP Traps',
    'Google Cloud 1',
    'Google Cloud 2',
    'Google Cloud 3',
    'Grids',
    'HAProxy Extension',
    'HAProxy Prometheus Extension',
    'Hikaricp',
    'Hosts 2',
    'IBM DataPower Extension',
    'IBM MQ Channel',
    'IBM MQ Extension',
    'IBM MQ Func',
    'IBM MQ Listener',
    'IBM MQ Queue',
    'IBM MQ Topic',
    'JDBC',
    'JMS',
    'Kafka Admin',
    'Kafka Connect',
    'Kafka Custom JMX Metrics',
    'Kafka Producer 1',
    'Kafka Producer 2',
    'Kafka Server',
    'Kafka Stream 1',
    'Kafka Stream 2',
    'Kubernetes Control Plane',
    'MSMQL WMI',
    'Microsoft Exchange',
    'Microsoft SQL Server',
    'Microsoft SQL Server Always On',
    'Microsoft SQL Server Extension Metrics',
    'MySQL Remote',
    'NAM',
    'NetScaler',
    'Ngis',
    'Node.js 2',
    'Oracle Extension 1',
    'Oracle Extension 2',
    'Palo Alto',
    'Palo Alto Generic Extension',
    'PostgreSQL 2',
    'Problem',
    'Prometheus Rabbit MQ Extension',
    'R2DBC',
    'RabbitMQ Prometheus Extension',
    'Redis',
    'Redis 2',
    'Redis Enterprise Extension Metrics',
    'Remote Agent',
    'Resilience4j',
    'Ruby',
    'SAP',
    'SAP Extension',
    'SAP HANA',
    'SAP HANA Database Extension',
    'SAP RFC',
    'SLO A',
    'SLO B1',
    'SLO B2',
    'SLO D',
    'SLO F',
    'SLO G',
    'SLO H',
    'SLO I',
    'SLO K',
    'SLO L',
    'SLO O',
    'SLO P',
    'SLO Q',
    'SLO R',
    'SLO S 1',
    'SLO S 2',
    'SLO S 3',
    'SLO S 5',
    'SLO T',
    'SLO U',
    'SLO V',
    'SLO W',
    'SLO X',
    'SLO Y',
    'SLO Z',
    'Snowflake',
    'Spark',
    'Telegraf',
    'Tomcat Extension',
    'Tomcat JMX Extension',
    'USCM',
    'VCenter',
    'VMware 2',
]


def main():
    input_file_name = "../../DynatraceDashboardGenerator/dashboard_blueprint.yaml"
    output_file_name = "../../DynatraceDashboardGenerator/dashboard_blueprint_commented.yaml"

    with open(input_file_name, 'r', encoding='utf-8') as infile:
        with open(output_file_name, 'w', encoding='utf-8') as outfile:
            lines = infile.readlines()
            for line in lines:
                if line.startswith('{dashboard'):
                    # print(line.strip())
                    splits = line.split("'")
                    dashboard_reference = splits[1]
                    if dashboard_reference in dashboards_to_comment:
                        # print(f'#{line.strip()}')
                        outfile.write(f'#{line.strip()}\n')
                    else:
                        # print(line.strip())
                        outfile.write(f'{line.strip()}\n')
                else:
                    # print(line.strip())
                    outfile.write(f'{line.strip()}\n')


if __name__ == '__main__':
    main()
