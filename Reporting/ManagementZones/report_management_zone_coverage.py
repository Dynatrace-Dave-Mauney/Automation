import copy
import urllib.parse

from Reuse import dynatrace_api
from Reuse import environment
from Reuse import report_writer

entity_types_of_interest = [
    'APPLICATION',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    'CONTAINER_GROUP',
    'CONTAINER_GROUP_INSTANCE',
    'DATABASE_SERVICE',
    'HOST',
    'KUBERNETES_CLUSTER',
    'KUBERNETES_NODE',
    'KUBERNETES_SERVICE',
    'PROCESS_GROUP',
    'PROCESS_GROUP_INSTANCE',
    'SERVICE',
]

entity_types_of_interest_complete = [
    'DATABASE_SERVICE',
    'APM_SECURITY_GATEWAY',
    'APPLICATION',
    'APPLICATION_METHOD',
    'APPLICATION_METHOD_GROUP',
    'APPMON_SERVER',
    'APPMON_SYSTEM_PROFILE',
    'AUTO_SCALING_GROUP',
    # 'AUXILIARY_SYNTHETIC_TEST',
    'AWS_APPLICATION_LOAD_BALANCER',
    'AWS_AVAILABILITY_ZONE',
    'AWS_CREDENTIALS',
    'AWS_LAMBDA_FUNCTION',
    'AWS_NETWORK_LOAD_BALANCER',
    'AZURE_API_MANAGEMENT_SERVICE',
    'AZURE_APPLICATION_GATEWAY',
    'AZURE_APP_SERVICE_PLAN',
    'AZURE_COSMOS_DB',
    'AZURE_CREDENTIALS',
    'AZURE_EVENT_HUB',
    'AZURE_EVENT_HUB_NAMESPACE',
    'AZURE_FUNCTION_APP',
    'AZURE_IOT_HUB',
    'AZURE_LOAD_BALANCER',
    'AZURE_MGMT_GROUP',
    'AZURE_REDIS_CACHE',
    'AZURE_REGION',
    'AZURE_SERVICE_BUS_NAMESPACE',
    'AZURE_SERVICE_BUS_QUEUE',
    'AZURE_SERVICE_BUS_TOPIC',
    'AZURE_SQL_DATABASE',
    'AZURE_SQL_ELASTIC_POOL',
    'AZURE_SQL_SERVER',
    'AZURE_STORAGE_ACCOUNT',
    'AZURE_SUBSCRIPTION',
    'AZURE_TENANT',
    'AZURE_VM',
    'AZURE_VM_SCALE_SET',
    'AZURE_WEB_APP',
    'BROWSER',
    # 'CF_APPLICATION',
    # 'CF_FOUNDATION',
    'CINDER_VOLUME',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    # 'CLOUD_NETWORK_INGRESS',
    # 'CLOUD_NETWORK_POLICY',
    'CONTAINER_GROUP',
    'CONTAINER_GROUP_INSTANCE',
    'CUSTOM_APPLICATION',
    'CUSTOM_DEVICE',
    'CUSTOM_DEVICE_GROUP',
    'DCRUM_APPLICATION',
    'DCRUM_SERVICE',
    'DCRUM_SERVICE_INSTANCE',
    'DEVICE_APPLICATION_METHOD',
    'DEVICE_APPLICATION_METHOD_GROUP',
    'DISK',
    'DOCKER_CONTAINER_GROUP',
    'DOCKER_CONTAINER_GROUP_INSTANCE',
    'DYNAMO_DB_TABLE',
    'EBS_VOLUME',
    'EC2_INSTANCE',
    'ELASTIC_LOAD_BALANCER',
    'ENVIRONMENT',
    'EXTERNAL_SYNTHETIC_TEST_STEP',
    'GCP_ZONE',
    'GEOLOCATION',
    'GEOLOC_SITE',
    'GOOGLE_COMPUTE_ENGINE',
    'HOST',
    'HOST_GROUP',
    'HTTP_CHECK',
    'HTTP_CHECK_STEP',
    'HYPERVISOR',
    'HYPERVISOR_CLUSTER',
    'HYPERVISOR_DISK',
    'KUBERNETES_CLUSTER',
    'KUBERNETES_NODE',
    'KUBERNETES_SERVICE',
    'MOBILE_APPLICATION',
    'MULTIPROTOCOL_MONITOR',
    'NETWORK_INTERFACE',
    'NEUTRON_SUBNET',
    'OPENSTACK_PROJECT',
    'OPENSTACK_REGION',
    'OPENSTACK_VM',
    'OS',
    'PROCESS_GROUP',
    'PROCESS_GROUP_INSTANCE',
    'QUEUE',
    'QUEUE_INSTANCE',
    'RELATIONAL_DATABASE_SERVICE',
    'S3BUCKET',
    'SERVICE',
    'SERVICE_INSTANCE',
    'SERVICE_METHOD',
    'SERVICE_METHOD_GROUP',
    'SWIFT_CONTAINER',
    'SYNTHETIC_LOCATION',
    'SYNTHETIC_TEST',
    'SYNTHETIC_TEST_STEP',
    'VCENTER',
    'VIRTUALMACHINE',
    'VMWARE_DATACENTER',
]

entity_types_of_interest_skimpy = [
    'APPLICATION',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    'CONTAINER_GROUP',
    'CONTAINER_GROUP_INSTANCE',
    'DATABASE_SERVICE',
    'HOST',
    'KUBERNETES_SERVICE',
    'PROCESS_GROUP',
    'PROCESS_GROUP_INSTANCE',
    'SERVICE',
]

entity_types_of_interest_fullest_possible = [
    'DATABASE_SERVICE',
    'APM_SECURITY_GATEWAY',
    'APPLICATION',
    'APPLICATION_METHOD',
    'APPLICATION_METHOD_GROUP',
    'APPMON_SERVER',
    'APPMON_SYSTEM_PROFILE',
    'AUTO_SCALING_GROUP',
    'AWS_APPLICATION_LOAD_BALANCER',
    'AWS_AVAILABILITY_ZONE',
    'AWS_CREDENTIALS',
    'AWS_LAMBDA_FUNCTION',
    'AWS_NETWORK_LOAD_BALANCER',
    'AZURE_API_MANAGEMENT_SERVICE',
    'AZURE_APPLICATION_GATEWAY',
    'AZURE_APP_SERVICE_PLAN',
    'AZURE_COSMOS_DB',
    'AZURE_CREDENTIALS',
    'AZURE_EVENT_HUB',
    'AZURE_EVENT_HUB_NAMESPACE',
    'AZURE_FUNCTION_APP',
    'AZURE_IOT_HUB',
    'AZURE_LOAD_BALANCER',
    'AZURE_MGMT_GROUP',
    'AZURE_REDIS_CACHE',
    'AZURE_REGION',
    'AZURE_SERVICE_BUS_NAMESPACE',
    'AZURE_SERVICE_BUS_QUEUE',
    'AZURE_SERVICE_BUS_TOPIC',
    'AZURE_SQL_DATABASE',
    'AZURE_SQL_ELASTIC_POOL',
    'AZURE_SQL_SERVER',
    'AZURE_STORAGE_ACCOUNT',
    'AZURE_SUBSCRIPTION',
    'AZURE_TENANT',
    'AZURE_VM',
    'AZURE_VM_SCALE_SET',
    'AZURE_WEB_APP',
    'BOSH_DEPLOYMENT',
    'BROWSER',
    'CF_FOUNDATION',
    'CINDER_VOLUME',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    'CONTAINER_GROUP',
    'CONTAINER_GROUP_INSTANCE',
    'CUSTOM_APPLICATION',
    'CUSTOM_DEVICE',
    'CUSTOM_DEVICE_GROUP',
    'DATASTORE',
    'DCRUM_APPLICATION',
    'DCRUM_SERVICE',
    'DCRUM_SERVICE_INSTANCE',
    'DEVICE_APPLICATION_METHOD',
    'DEVICE_APPLICATION_METHOD_GROUP',
    'DISK',
    'DOCKER_CONTAINER_GROUP',
    'DOCKER_CONTAINER_GROUP_INSTANCE',
    'DYNAMO_DB_TABLE',
    'EBS_VOLUME',
    'EC2_INSTANCE',
    'ELASTIC_LOAD_BALANCER',
    'ENVIRONMENT',
    'EXTERNAL_SYNTHETIC_TEST',
    'EXTERNAL_SYNTHETIC_TEST_STEP',
    'GCP_ZONE',
    'GEOLOCATION',
    'GEOLOC_SITE',
    'GOOGLE_COMPUTE_ENGINE',
    'HOST',
    'HOST_GROUP',
    'HTTP_CHECK',
    'HTTP_CHECK_STEP',
    'HYPERVISOR',
    'HYPERVISOR_CLUSTER',
    'HYPERVISOR_DISK',
    'KUBERNETES_CLUSTER',
    'KUBERNETES_NODE',
    'KUBERNETES_SERVICE',
    'MOBILE_APPLICATION',
    'MULTIPROTOCOL_MONITOR',
    'NETWORK_INTERFACE',
    'NEUTRON_SUBNET',
    'OPENSTACK_AVAILABILITY_ZONE',
    'OPENSTACK_COMPUTE_NODE',
    'OPENSTACK_PROJECT',
    'OPENSTACK_REGION',
    'OPENSTACK_VM',
    'OS',
    'PROCESS_GROUP',
    'PROCESS_GROUP_INSTANCE',
    'QUEUE',
    'QUEUE_INSTANCE',
    'RELATIONAL_DATABASE_SERVICE',
    'RUNTIME_COMPONENT',
    'S3BUCKET',
    'SERVICE',
    'SERVICE_INSTANCE',
    'SERVICE_METHOD',
    'SERVICE_METHOD_GROUP',
    'SOFTWARE_COMPONENT',
    'SWIFT_CONTAINER',
    'SYNTHETIC_LOCATION',
    'SYNTHETIC_TEST',
    'SYNTHETIC_TEST_STEP',
    'VCENTER',
    'VIRTUALMACHINE',
    'VMWARE_DATACENTER',
    'cloud:aws:acmprivateca',
    'cloud:aws:api_gateway',
    'cloud:aws:app_runner',
    'cloud:aws:appstream',
    'cloud:aws:appsync',
    'cloud:aws:athena',
    'cloud:aws:aurora',
    'cloud:aws:autoscaling',
    'cloud:aws:billing',
    'cloud:aws:cassandra',
    'cloud:aws:chatbot',
    'cloud:aws:cloud_front',
    'cloud:aws:cloudhsm',
    'cloud:aws:cloudsearch',
    'cloud:aws:codebuild',
    'cloud:aws:cognito',
    'cloud:aws:connect',
    'cloud:aws:datasync',
    'cloud:aws:dax',
    'cloud:aws:dms',
    'cloud:aws:documentdb',
    'cloud:aws:dxcon',
    'cloud:aws:dynamodb',
    'cloud:aws:ebs',
    'cloud:aws:ec2_spot',
    'cloud:aws:ec2api',
    'cloud:aws:ecs',
    'cloud:aws:ecs:cluster',
    'cloud:aws:efs',
    'cloud:aws:eks:cluster',
    'cloud:aws:elasticache',
    'cloud:aws:elasticbeanstalk',
    'cloud:aws:elasticinference',
    'cloud:aws:elastictranscoder',
    'cloud:aws:emr',
    'cloud:aws:es',
    'cloud:aws:events',
    'cloud:aws:fsx',
    'cloud:aws:gamelift',
    'cloud:aws:glue',
    'cloud:aws:inspector',
    'cloud:aws:iot',
    'cloud:aws:iot_things_graph',
    'cloud:aws:iotanalytics',
    'cloud:aws:kafka',
    'cloud:aws:kinesis:data_analytics',
    'cloud:aws:kinesis:data_firehose',
    'cloud:aws:kinesis:data_stream',
    'cloud:aws:kinesis:video_stream',
    'cloud:aws:lambda',
    'cloud:aws:lex',
    'cloud:aws:logs',
    'cloud:aws:media_tailor',
    'cloud:aws:mediaconnect',
    'cloud:aws:mediaconvert',
    'cloud:aws:mediapackagelive',
    'cloud:aws:mediapackagevod',
    'cloud:aws:mq',
    'cloud:aws:nat_gateway',
    'cloud:aws:neptune',
    'cloud:aws:opsworks',
    'cloud:aws:polly',
    'cloud:aws:qldb',
    'cloud:aws:rds',
    'cloud:aws:redshift',
    'cloud:aws:rekognition',
    'cloud:aws:robomaker',
    'cloud:aws:route53',
    'cloud:aws:route53resolver',
    'cloud:aws:s3',
    'cloud:aws:sage_maker:batch_transform_job',
    'cloud:aws:sage_maker:endpoint',
    'cloud:aws:sage_maker:endpoint_instance',
    'cloud:aws:sage_maker:ground_truth',
    'cloud:aws:sage_maker:processing_job',
    'cloud:aws:sage_maker:training_job',
    'cloud:aws:servicecatalog',
    'cloud:aws:ses',
    'cloud:aws:sns',
    'cloud:aws:sqs',
    'cloud:aws:ssm-runcommand',
    'cloud:aws:states',
    'cloud:aws:storagegateway',
    'cloud:aws:swf',
    'cloud:aws:textract',
    'cloud:aws:transfer',
    'cloud:aws:transitgateway',
    'cloud:aws:translate',
    'cloud:aws:trustedadvisor',
    'cloud:aws:usage',
    'cloud:aws:vpn',
    'cloud:aws:waf',
    'cloud:aws:wafv2',
    'cloud:aws:workmail',
    'cloud:aws:workspaces',
    'cloud:azure:apimanagement:service',
    'cloud:azure:app:containerapps',
    'cloud:azure:app:managedenvironments',
    'cloud:azure:appconfiguration:configurationstores',
    'cloud:azure:appplatform:spring',
    'cloud:azure:automation:automationaccounts',
    'cloud:azure:batch:account',
    'cloud:azure:blockchain:blockchainmembers',
    'cloud:azure:cache:redis',
    'cloud:azure:cdn:cdnwebapplicationfirewallpolicies',
    'cloud:azure:classic_storage_account',
    'cloud:azure:classic_storage_account:blob',
    'cloud:azure:classic_storage_account:file',
    'cloud:azure:classic_storage_account:queue',
    'cloud:azure:classic_storage_account:table',
    'cloud:azure:classic_virtual_machine',
    'cloud:azure:cognitiveservices:allinone',
    'cloud:azure:cognitiveservices:anomalydetector',
    'cloud:azure:cognitiveservices:bingautosuggest',
    'cloud:azure:cognitiveservices:bingcustomsearch',
    'cloud:azure:cognitiveservices:bingentitysearch',
    'cloud:azure:cognitiveservices:bingsearch',
    'cloud:azure:cognitiveservices:bingspellcheck',
    'cloud:azure:cognitiveservices:computervision',
    'cloud:azure:cognitiveservices:contentmoderator',
    'cloud:azure:cognitiveservices:customvisionprediction',
    'cloud:azure:cognitiveservices:customvisiontraining',
    'cloud:azure:cognitiveservices:face',
    'cloud:azure:cognitiveservices:immersivereader',
    'cloud:azure:cognitiveservices:inkrecognizer',
    'cloud:azure:cognitiveservices:luis',
    'cloud:azure:cognitiveservices:luisauthoring',
    'cloud:azure:cognitiveservices:openai',
    'cloud:azure:cognitiveservices:personalizer',
    'cloud:azure:cognitiveservices:qnamaker',
    'cloud:azure:cognitiveservices:speech',
    'cloud:azure:cognitiveservices:textanalytics',
    'cloud:azure:cognitiveservices:translator',
    'cloud:azure:containerinstance:containergroup',
    'cloud:azure:containerregistry:registries',
    'cloud:azure:containerservice:managedcluster',
    'cloud:azure:datafactory:v1',
    'cloud:azure:datafactory:v2',
    'cloud:azure:datalakeanalytics:accounts',
    'cloud:azure:datalakestore:accounts',
    'cloud:azure:datashare:accounts',
    'cloud:azure:devices:iothubs',
    'cloud:azure:devices:provisioningservices',
    'cloud:azure:documentdb:databaseaccounts:global',
    'cloud:azure:documentdb:databaseaccounts:mongo',
    'cloud:azure:eventgrid:domains',
    'cloud:azure:eventgrid:systemtopics',
    'cloud:azure:eventgrid:topics',
    'cloud:azure:eventhub:clusters',
    'cloud:azure:frontdoor',
    'cloud:azure:hdinsight:cluster',
    'cloud:azure:hybridcompute:machines',
    'cloud:azure:insights:components',
    'cloud:azure:iotcentral:iotapps',
    'cloud:azure:keyvault:vaults',
    'cloud:azure:kusto:clusters',
    'cloud:azure:logic:integrationserviceenvironments',
    'cloud:azure:logic:workflows',
    'cloud:azure:machinelearningservices:workspaces',
    'cloud:azure:maps:accounts',
    'cloud:azure:mariadb:server',
    'cloud:azure:media:mediaservices',
    'cloud:azure:media:mediaservices:streamingendpoints',
    'cloud:azure:mysql:server',
    'cloud:azure:netapp:netappaccounts:capacitypools',
    'cloud:azure:netapp:netappaccounts:capacitypools:volumes',
    'cloud:azure:network:applicationgateways',
    'cloud:azure:network:azurefirewalls',
    'cloud:azure:network:dnszones',
    'cloud:azure:network:expressroutecircuits',
    'cloud:azure:network:loadbalancers:basic',
    'cloud:azure:network:loadbalancers:gateway',
    'cloud:azure:network:loadbalancers:standard',
    'cloud:azure:network:networkinterfaces',
    'cloud:azure:network:networkwatchers:connectionmonitors',
    'cloud:azure:network:networkwatchers:connectionmonitors:preview',
    'cloud:azure:network:privatednszones',
    'cloud:azure:network:publicipaddresses',
    'cloud:azure:notificationhubs:namespaces:notificationhubs',
    'cloud:azure:postgresql:flexibleservers',
    'cloud:azure:postgresql:server',
    'cloud:azure:postgresql:serverv2',
    'cloud:azure:powerbidedicated:capacities',
    'cloud:azure:recoveryservices:vaults',
    'cloud:azure:relay:namespaces',
    'cloud:azure:search:searchservices',
    'cloud:azure:servicefabricmesh:applications',
    'cloud:azure:signalrservice:signalr',
    'cloud:azure:sql:managed',
    'cloud:azure:sql:servers',
    'cloud:azure:sql:servers:databases:datawarehouse',
    'cloud:azure:sql:servers:databases:dtu',
    'cloud:azure:sql:servers:databases:hyperscale',
    'cloud:azure:sql:servers:databases:vcore',
    'cloud:azure:sql:servers:elasticpools:dtu',
    'cloud:azure:sql:servers:elasticpools:vcore',
    'cloud:azure:storage:storageaccounts',
    'cloud:azure:storage:storageaccounts:blob',
    'cloud:azure:storage:storageaccounts:file',
    'cloud:azure:storage:storageaccounts:queue',
    'cloud:azure:storage:storageaccounts:table',
    'cloud:azure:storagesync:storagesyncservices',
    'cloud:azure:streamanalytics:streamingjobs',
    'cloud:azure:synapse:workspaces',
    'cloud:azure:synapse:workspaces:bigdatapools',
    'cloud:azure:synapse:workspaces:sqlpools',
    'cloud:azure:timeseriesinsights:environments',
    'cloud:azure:timeseriesinsights:eventsources',
    'cloud:azure:traffic_manager_profile',
    'cloud:azure:virtual_network_gateway',
    'cloud:azure:web:appslots',
    'cloud:azure:web:functionslots',
    'cloud:azure:web:hostingenvironments:v2',
    'cloud:azure:web:serverfarms',
    'cloud:gcp:autoscaler',
    'cloud:gcp:cloudsql_database',
    'cloud:gcp:gce_instance',
    'cloud:gcp:instance_group',
    'cloud:gcp:project',
    'cloud:gcp:tpu_worker',
    'filesystem:path',
    'os:service',
    'wmi:com_dynatrace_extension_ad_atq',
    'wmi:com_dynatrace_extension_ad_dfs',
    'wmi:com_dynatrace_extension_ad_dhcp',
    'wmi:com_dynatrace_extension_ad_dns',
    'wmi:com_dynatrace_extension_ad_dra',
    'wmi:com_dynatrace_extension_ad_esent',
    'wmi:com_dynatrace_extension_ad_instance',
    'wmi:com_dynatrace_extension_ad_ldap',
    'wmi:com_dynatrace_extension_ad_network',
    'wmi:com_dynatrace_extension_lsa_esent',
    'wmi:com_dynatrace_extension_lsa_kerberos',
    'wmi:com_dynatrace_extension_lsa_ntlm',
]

# Prior customer list.
# Amend as needed from 'monitored_entity_filters', which was obtained by running 'dump_monitored_entity_filters()'
# in 'Tools/APISpecs/dump_config_v1_spec_details_of_interest.py'
# NOTE: DATABASE_SERVICE is "made up" to capture coverage of databases specifically.
entity_types_of_interest_prior_customer = [
    'APPLICATION',
    # 'AZURE_API_MANAGEMENT_SERVICE',
    'AZURE_APPLICATION_GATEWAY',
    'AZURE_COSMOS_DB',
    # 'AZURE_CREDENTIALS',
    # 'AZURE_EVENT_HUB',
    'AZURE_EVENT_HUB_NAMESPACE',
    'AZURE_FUNCTION_APP',
    # 'AZURE_IOT_HUB',
    'AZURE_LOAD_BALANCER',
    # 'AZURE_MGMT_GROUP',
    'AZURE_REDIS_CACHE',
    # 'AZURE_REGION',
    'AZURE_SERVICE_BUS_NAMESPACE',
    # 'AZURE_SERVICE_BUS_QUEUE',
    # 'AZURE_SERVICE_BUS_TOPIC',
    # 'AZURE_SQL_DATABASE',
    'AZURE_SQL_ELASTIC_POOL',
    'AZURE_SQL_SERVER',
    # 'AZURE_STORAGE_ACCOUNT',
    # 'AZURE_SUBSCRIPTION',
    # 'AZURE_TENANT',
    'AZURE_VM',
    'AZURE_VM_SCALE_SET',
    'AZURE_WEB_APP',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    'CONTAINER_GROUP',
    'CUSTOM_DEVICE',
    'DATABASE_SERVICE',
    # 'DOCKER_CONTAINER_GROUP',
    'HOST',
    'HTTP_CHECK',
    'KUBERNETES_CLUSTER',
    'KUBERNETES_NODE',
    'KUBERNETES_SERVICE',
    'MOBILE_APPLICATION',
    'PROCESS_GROUP',
    # 'QUEUE',
    'SERVICE',
    'SYNTHETIC_TEST',
    # 'VIRTUALMACHINE',
    # 'VMWARE_DATACENTER',
]

# Typical AWS customer list.
# Amend as needed from 'monitored_entity_filters', which was obtained by running 'dump_monitored_entity_filters()'
# in 'Tools/APISpecs/dump_config_v1_spec_details_of_interest.py'
# NOTE: DATABASE_SERVICE is "made up" to capture coverage of databases specifically.
# NOTE: Some entities below are commented out only because they are not used at my current customer.
entity_types_of_interest_aws = [
    'APPLICATION',
    'AUTO_SCALING_GROUP',
    'AWS_APPLICATION_LOAD_BALANCER',
    'AWS_AVAILABILITY_ZONE',
    'AWS_CREDENTIALS',
    'AWS_LAMBDA_FUNCTION',
    'AWS_NETWORK_LOAD_BALANCER',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    'CONTAINER_GROUP',
    # 'CUSTOM_APPLICATION',
    'CUSTOM_DEVICE',
    'DATABASE_SERVICE',
    # 'DOCKER_CONTAINER_GROUP',
    # 'DYNAMO_DB_TABLE',
    # 'EBS_VOLUME',
    'EC2_INSTANCE',
    # 'ELASTIC_LOAD_BALANCER',
    'HOST',
    'HTTP_CHECK',
    'HYPERVISOR',
    'KUBERNETES_CLUSTER',
    'KUBERNETES_NODE',
    # 'KUBERNETES_SERVICE',
    # 'MOBILE_APPLICATION',
    'PROCESS_GROUP',
    # 'QUEUE',
    'RELATIONAL_DATABASE_SERVICE',
    'SERVICE',
    'SYNTHETIC_TEST',
    # 'VIRTUALMACHINE',
    # 'VMWARE_DATACENTER',
]

entity_types_of_interest_short_list = [
    'APPLICATION',
    'AWS_CREDENTIALS',
    'HOST',
    'HTTP_CHECK',
    'KUBERNETES_CLUSTER',
    'PROCESS_GROUP',
    'SERVICE',
    'SYNTHETIC_TEST',
]

# These are close to being the full list of possible mz entities
monitored_entity_filters = [
    'APM_SECURITY_GATEWAY',
    'APPLICATION',
    'APPLICATION_METHOD',
    'APPLICATION_METHOD_GROUP',
    'APPMON_SERVER',
    'APPMON_SYSTEM_PROFILE',
    'AUTO_SCALING_GROUP',
    # 'AUXILIARY_SYNTHETIC_TEST',
    'AWS_APPLICATION_LOAD_BALANCER',
    'AWS_AVAILABILITY_ZONE',
    'AWS_CREDENTIALS',
    'AWS_LAMBDA_FUNCTION',
    'AWS_NETWORK_LOAD_BALANCER',
    'AZURE_API_MANAGEMENT_SERVICE',
    'AZURE_APPLICATION_GATEWAY',
    'AZURE_COSMOS_DB',
    'AZURE_CREDENTIALS',
    'AZURE_EVENT_HUB',
    'AZURE_EVENT_HUB_NAMESPACE',
    'AZURE_FUNCTION_APP',
    'AZURE_IOT_HUB',
    'AZURE_LOAD_BALANCER',
    'AZURE_MGMT_GROUP',
    'AZURE_REDIS_CACHE',
    'AZURE_REGION',
    'AZURE_SERVICE_BUS_NAMESPACE',
    'AZURE_SERVICE_BUS_QUEUE',
    'AZURE_SERVICE_BUS_TOPIC',
    'AZURE_SQL_DATABASE',
    'AZURE_SQL_ELASTIC_POOL',
    'AZURE_SQL_SERVER',
    'AZURE_STORAGE_ACCOUNT',
    'AZURE_SUBSCRIPTION',
    'AZURE_TENANT',
    'AZURE_VM',
    'AZURE_VM_SCALE_SET',
    'AZURE_WEB_APP',
    # 'CF_APPLICATION',
    # 'CF_FOUNDATION',
    'CINDER_VOLUME',
    'CLOUD_APPLICATION',
    'CLOUD_APPLICATION_INSTANCE',
    'CLOUD_APPLICATION_NAMESPACE',
    # 'CLOUD_NETWORK_INGRESS',
    # 'CLOUD_NETWORK_POLICY',
    'CONTAINER_GROUP',
    'CONTAINER_GROUP_INSTANCE',
    'CUSTOM_APPLICATION',
    'CUSTOM_DEVICE',
    'CUSTOM_DEVICE_GROUP',
    'DCRUM_APPLICATION',
    'DCRUM_SERVICE',
    'DCRUM_SERVICE_INSTANCE',
    'DEVICE_APPLICATION_METHOD',
    'DISK',
    'DOCKER_CONTAINER_GROUP',
    'DOCKER_CONTAINER_GROUP_INSTANCE',
    'DYNAMO_DB_TABLE',
    'EBS_VOLUME',
    'EC2_INSTANCE',
    'ELASTIC_LOAD_BALANCER',
    'ENVIRONMENT',
    'EXTERNAL_SYNTHETIC_TEST_STEP',
    'GCP_ZONE',
    'GEOLOCATION',
    'GEOLOC_SITE',
    'GOOGLE_COMPUTE_ENGINE',
    'HOST',
    'HOST_GROUP',
    'HTTP_CHECK',
    'HTTP_CHECK_STEP',
    'HYPERVISOR',
    'KUBERNETES_CLUSTER',
    'KUBERNETES_NODE',
    'KUBERNETES_SERVICE',
    'MOBILE_APPLICATION',
    'NETWORK_INTERFACE',
    'NEUTRON_SUBNET',
    'OPENSTACK_PROJECT',
    'OPENSTACK_REGION',
    'OPENSTACK_VM',
    'OS',
    'PROCESS_GROUP',
    'PROCESS_GROUP_INSTANCE',
    'QUEUE',
    'RELATIONAL_DATABASE_SERVICE',
    'SERVICE',
    'SERVICE_INSTANCE',
    'SERVICE_METHOD',
    'SERVICE_METHOD_GROUP',
    'SWIFT_CONTAINER',
    'SYNTHETIC_LOCATION',
    'SYNTHETIC_TEST',
    'SYNTHETIC_TEST_STEP',
    'VIRTUALMACHINE',
    'VMWARE_DATACENTER',
]


def process(env, token):
    if 'DATABASE_SERVICE' in entity_types_of_interest and 'SERVICE' not in entity_types_of_interest:
        print('The "entity_types_of_interest" list must include "SERVICE" if "DATABASE_SERVICE" is included.')
        exit(1)

    mz_coverage_dict = {}

    counts_by_entity_type_template = {}
    for entity_type_of_interest in entity_types_of_interest:
        counts_by_entity_type_template[entity_type_of_interest] = 0

    endpoint = '/api/config/v1/managementZones'
    management_zone_json_list = dynatrace_api.get_json_list_with_pagination(f'{env}{endpoint}', token)

    for management_zone_json in management_zone_json_list:
        inner_management_zone_json_list = management_zone_json.get('values')
        for inner_management_zone_json in inner_management_zone_json_list:
            mz_name = inner_management_zone_json.get('name')
            mz_coverage_dict[mz_name] = copy.deepcopy(counts_by_entity_type_template)

    for entity_type_of_interest in entity_types_of_interest:
        get_mz_coverage_for_entity_type(env, token, entity_type_of_interest, mz_coverage_dict)

    rows = []
    for key in sorted(mz_coverage_dict.keys()):
        row = [key]
        for entity_type in entity_types_of_interest:
            row.append(mz_coverage_dict.get(key).get(entity_type))
        rows.append(row)

    report_writer.initialize_text_file(None)
    report_name = 'Management Zone Coverage'
    report_headers = ['Management Zone']
    report_headers.extend(entity_types_of_interest)
    report_writer.write_text(None, report_name, report_headers, rows, delimiter='|')
    report_writer.write_console(report_name, report_headers, rows, delimiter='|')
    report_writer.write_xlsx(None, report_name, report_headers, rows, header_format=None, auto_filter=(0, len(report_headers)))
    report_writer.write_html(None, report_name, report_headers, rows)


def get_mz_coverage_for_entity_type(env, token, entity_type, mz_coverage_dict):
    # Skip special entity types used for counting only
    # Database services will be counted when the SERVICE entity type is processed
    if entity_type == 'DATABASE_SERVICE':
        return

    endpoint = '/api/v2/entities'
    entity_selector = 'type(' + entity_type + ')'
    raw_params = f'&entitySelector={entity_selector}&fields=managementZones'
    if entity_type == 'SERVICE':
        raw_params += ',properties.serviceType'
    params = urllib.parse.quote(raw_params, safe='/,&=')
    entities_json_list = dynatrace_api.get_json_list_with_pagination(f'{env}{endpoint}', token, params=params)

    for entities_json in entities_json_list:
        inner_entities_json_list = entities_json.get('entities')
        for inner_entities_json in inner_entities_json_list:
            management_zone_list = inner_entities_json.get('managementZones')
            if management_zone_list:
                if entity_type == 'SERVICE' and inner_entities_json.get('properties').get('serviceType') == 'DATABASE_SERVICE' and 'DATABASE_SERVICE' in entity_types_of_interest:
                    increment_mz_coverage_dict_counts('DATABASE_SERVICE', management_zone_list, mz_coverage_dict)
                else:
                    increment_mz_coverage_dict_counts(entity_type, management_zone_list, mz_coverage_dict)


def increment_mz_coverage_dict_counts(entity_type, management_zone_list, mz_coverage_dict):
    for management_zone in management_zone_list:
        mz_name = management_zone.get('name')
        mz_coverage_dict[mz_name][entity_type] += 1


def main():
    friendly_function_name = 'Dynatrace Automation Reporting'
    env_name_supplied = environment.get_env_name(friendly_function_name)
    # For easy control from IDE
    # env_name_supplied = 'Prod'
    # env_name_supplied = 'PreProd'
    # env_name_supplied = 'Sandbox'
    # env_name_supplied = 'Dev'
    # env_name_supplied = 'Personal'
    # env_name_supplied = 'Demo'
    _, env, token = environment.get_environment_for_function(env_name_supplied, friendly_function_name)
    process(env, token)


if __name__ == '__main__':
    main()
