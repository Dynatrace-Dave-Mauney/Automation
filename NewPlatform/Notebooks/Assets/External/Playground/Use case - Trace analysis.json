{
    "version": "5",
    "defaultTimeframe": {
        "from": "now-7d",
        "to": "now",
        "details": {
            "from": {
                "type": "expression",
                "normalized": "now-7d",
                "date": "2023-11-09T08:02:25.977Z"
            },
            "to": {
                "type": "expression",
                "normalized": "now",
                "date": "2023-11-16T08:02:25.978Z"
            }
        }
    },
    "sections": [
        {
            "id": "2c238ffe-363f-4e3e-9ffe-8e90bcd06f72",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "timeseries avg(dt.entity.host), by:{dt.entity.host}",
                    "timeframe": {
                        "from": "now-7d",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-7d",
                                "date": "2023-11-09T08:02:25.977Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-11-16T08:02:25.978Z"
                            }
                        }
                    }
                },
                "state": "success",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                },
                "visualizationSettings": {
                    "thresholds": [],
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "absolute"
                        },
                        "categoryOverrides": {}
                    },
                    "singleValue": {
                        "label": "",
                        "prefixIcon": "",
                        "autoscale": true,
                        "alignment": "center"
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0,
                        "columnWidths": {}
                    }
                },
                "visualization": "recordView"
            },
            "height": 14
        },
        {
            "id": "6e9eef06-6fed-4211-b4fd-44a65e630c9d",
            "type": "markdown",
            "markdown": "# I see the data on the Trace \u2013 how can I analyze this?\n- What is the difference between \u201cData explorer\u201d and \u201cMultidimensional analysis?\n- Why do I need to setup a request attribute before being able to slice/dice based on this?\n- Why can I don't use the trace data that was ingested via OpenTelemetry to slice/dice my traces?\n- How can I analyze the OpenTelemetry span attributes in the same way as \u201cRequest attributes\u201d? I see both on the trace\n\n"
        },
        {
            "id": "6b751b2e-da08-432b-9ba8-0300979558e2",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans\n| limit 100\n| sort start_time asc",
                    "timeframe": {
                        "from": "now-6h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-6h",
                                "date": "2023-05-04T04:44:33.700Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-05-04T10:44:33.700Z"
                            }
                        }
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [
                            [
                                "supportability.non_persisted_attribute_keys"
                            ]
                        ],
                        "firstVisibleRowIndex": 22
                    }
                },
                "state": "error",
                "visualization": "table",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "showInput": true,
            "height": 513,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "76bc0592-73e8-4d02-9589-4c5c3220acd0",
            "type": "markdown",
            "markdown": "## Get all serverside spans from the \"easyTravel Customer Frontend\" split by Hostname"
        },
        {
            "id": "e880e13c-b221-4a73-82ef-030c2e72d730",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans\n //| filter dt.entity.service == \"SERVICE-AA3DA1E131F8D361\" \n | filter dt.entity.service.name == \"easyTravel Customer Frontend\"\n | lookup [fetch dt.entity.host | fieldsAdd entity.name], sourceField:dt.entity.host, lookupField:id, prefix:\"host.\"\n | summarize count(), by:{host.entity.name, bin(timestamp,1m)}",
                    "timeframe": {
                        "from": "now-2h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-2h",
                                "date": "2023-05-11T11:10:56.007Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-05-11T13:10:56.007Z"
                            }
                        }
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "state": "success",
                "visualization": "areaChart",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "showInput": true,
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "2c94e2d9-f2ce-4e37-b25d-058a7271a041",
            "type": "markdown",
            "markdown": "# Give me requests that have been executed on AMD EPYC CPUs"
        },
        {
            "id": "c91042df-26ad-4d9b-b532-02d9ca7a2a5b",
            "type": "dql",
            "title": "Explore CPUs",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch dt.entity.host | fieldsAdd additionalSystemInfo[system.processor.model]\n| filter contains(`additionalSystemInfo[system.processor.model]`, \"Xeon(R)\")",
                    "timeframe": {
                        "from": "now-24h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-24h",
                                "date": "2023-06-04T15:10:48.592Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-06-05T15:10:48.592Z"
                            }
                        }
                    }
                },
                "state": "success",
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "absolute"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableLineWrap": true,
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "visualization": "table",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "c72ca229-021f-4c63-a94d-edc4dbb2b061",
            "type": "dql",
            "title": "2. Find requests processed on XEON CPUs",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans | filter span.kind == \"server\"\n| lookup sourceField:dt.entity.host, lookupField:id, prefix:\"host.\", [\n  fetch dt.entity.host | fieldsAdd cpu = additionalSystemInfo[system.processor.model]\n  | filter contains(cpu, \"Xeon(R)\")\n]\n| filter isNotNull(host.cpu) and isNotNull(endpoint.name)\n| fields trace.id, span.id, dt.entity.service.name, endpoint.name, host.cpu, duration\n| summarize avg(duration), by: {dt.entity.service.name, endpoint.name, host.cpu}",
                    "timeframe": {
                        "from": "now-24h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-24h",
                                "date": "2023-06-04T15:10:48.592Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-06-05T15:10:48.592Z"
                            }
                        }
                    }
                },
                "state": "success",
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "absolute"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableLineWrap": true,
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 37
                    }
                },
                "visualization": "table",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "066f5476-7025-4bda-bd63-6b4afbc891f2",
            "type": "markdown",
            "markdown": "# Show me all requests with HTTP 5xx but without the 503s. And please ignore all the noisy /health requests that we know that they fail from time to time..."
        },
        {
            "id": "12127c1f-9db6-44a6-adcf-6b85699d3eec",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans\n| filter NOT(contains(http.target, \"health\"))\n| filter isNotNull(http.status_code)\n| fieldsAdd toLong(http.status_code), alias: http.status_code\n| filter http.status_code >= 500 AND http.status_code != 503\n| summarize count(), alias: cnt, by: {http.target, http.status_code}\n| filter cnt > 20\n| fieldsAdd targetandcode = concat(http.target, \" - \", http.status_code)\n| fieldsKeep targetandcode, cnt\n| sort cnt desc",
                    "timeframe": {
                        "from": "now-2h",
                        "to": "now"
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal",
                            "scale": "absolute",
                            "categoryAxisTickLayout": "horizontal",
                            "categoryAxisLabel": [
                                "targetandcode"
                            ],
                            "categoryAxis": [
                                "targetandcode"
                            ],
                            "valueAxis": [
                                "cnt"
                            ],
                            "valueAxisLabel": [
                                "cnt"
                            ]
                        },
                        "legend": {
                            "hidden": true
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "state": "success",
                "visualization": "categoricalBarChart",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "showInput": true,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "425e1125-3e64-44fe-8005-46c669e23c7f",
            "type": "markdown",
            "markdown": "# How much exceptions did we see within the last 2h where the exception message contains \"timeout\""
        },
        {
            "id": "930c4b5d-e8d0-4d32-ab22-fe7c83a2e065",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans, from: now() -2h, to: now(), scanLimitGBytes: 500, samplingRatio: 1\n| filter isNotNull(span.events_as_json)\n| parse span.events_as_json, \"JSON_ARRAY:exceptions\"\n| filter arraySize(exceptions) == 1\n| fieldsAdd exception = exceptions[0]\n| filter exception[span_event.name] != \"\"\n| filter exception[exception.type] != \"\"\n| filter contains(exception[exception.message], \"timeout\")\n| summarize count(), by:{bin(start_time, 1m)}",
                    "timeframe": {
                        "from": "now-24h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-24h",
                                "date": "2023-06-04T15:10:48.592Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-06-05T15:10:48.592Z"
                            }
                        }
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "seriesOverrides": [
                            {
                                "seriesId": "count()",
                                "override": {
                                    "color": "#b3007d"
                                }
                            }
                        ]
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "state": "success",
                "visualization": "barChart",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "showInput": true,
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "ee9eb78c-9454-4907-9b3b-cb85ba87c8ea",
            "type": "markdown",
            "markdown": "## Give me traces, in which a certain log message has occurred"
        },
        {
            "id": "7a8a8606-c476-4aab-ac6c-523c315d40ee",
            "type": "dql",
            "title": "1. Explore logs",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch logs\n| filter isNotNull(trace_id)\n| filter matchesPhrase(content, \"Only VISA\") | limit 10",
                    "timeframe": {
                        "from": "now-24h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-24h",
                                "date": "2023-06-04T15:10:48.592Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-06-05T15:10:48.592Z"
                            }
                        }
                    }
                },
                "state": "success",
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "absolute"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableLineWrap": true,
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [
                            [
                                "content"
                            ]
                        ],
                        "firstVisibleRowIndex": 0
                    }
                },
                "visualization": "table",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "showInput": true,
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "0fd1cf88-c539-443d-9607-0c53da623265",
            "type": "dql",
            "title": "2. Endpoints of traces of specific  logs",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans\n| filter span.kind == \"server\"\n| lookup sourceField:trace.id, lookupField:trace_id, prefix:\"logs.\", [\n  fetch logs\n  | filter isNotNull(trace_id)\n  | filter matchesPhrase(content, \"Only VISA\")\n  | fields trace_id\n]\n| filter isNotNull(logs.trace_id)\n| summarize count(), by: { dt.entity.service.name, endpoint.name }\n| limit 100\n| sort `count()`\n| sort `count()` desc",
                    "timeframe": {
                        "from": "now-24h",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-24h",
                                "date": "2023-06-04T15:10:48.592Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-06-05T15:10:48.592Z"
                            }
                        }
                    }
                },
                "state": "success",
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "circleChartSettings": {
                            "groupingThresholdType": "absolute"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "rowDensity": "condensed",
                        "enableLineWrap": true,
                        "enableSparklines": false,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "visualization": "table",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "378aa8c2-5954-417b-8aa9-381e64f3e3cf",
            "type": "markdown",
            "markdown": "# Get ALL select statements from my JourneyService?"
        },
        {
            "id": "b924b2c5-0677-4f55-a465-6500e8fb3eb9",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans\n| filter db.name != \"\"\n| filter dt.entity.service.name == \"JourneyService\"\n| filter startsWith(db.statement, \"select\")\n| summarize count(), alias: cnt, by: {db.statement}\n| sort cnt desc",
                    "timeframe": {
                        "from": "now-10m",
                        "to": "now",
                        "details": {
                            "from": {
                                "type": "expression",
                                "normalized": "now-10m",
                                "date": "2023-05-04T12:35:27.829Z"
                            },
                            "to": {
                                "type": "expression",
                                "normalized": "now",
                                "date": "2023-05-04T12:45:27.829Z"
                            }
                        }
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect",
                        "categoricalBarChartSettings": {
                            "layout": "horizontal"
                        }
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "state": "success",
                "visualization": "pieChart",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "0c9852f1-e115-4216-8a17-3a6dab8b17de",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans, from: now() - 5m\n//| filter isNull(span.parent_id)\n| filter http.target != \"\"\n| filter span.kind == \"server\"\n| lookup [fetch spans, from: now() - 5m\n  | filter db.name != \"\"\n  | filter dt.entity.service.name == \"JourneyService\"\n  | filter startsWith(db.statement, \"select\")\n  | filter db.statement != \"\"\n  | sort cnt desc], sourceField: trace.id, lookupField: trace.id, prefix: \"look.\"\n| filter isNotNull(look.trace.id)\n| summarize count(), alias: cnt, by: {http.target, look.db.statement}\n| filter  cnt > 10 AND cnt < 10000\n| sort cnt desc",
                    "timeframe": {
                        "from": "now-10m",
                        "to": "now"
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "state": "success",
                "visualization": "categoricalBarChart",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "514eab35-5130-44ba-9d58-bbe33b9ac9d5",
            "type": "markdown",
            "markdown": "DB Pool size"
        },
        {
            "id": "2f338496-fa31-41ac-aa4a-3f56253316b3",
            "type": "markdown",
            "markdown": "# I want to know the endpoint requests split by URL that are served within my environment/kubernetes namespace/...? \n- where we see more than 10 and less than 500 requests within the last 15 minutes\n- without statical (Image, CSS,...) requests , and \n- without health requests\n- All of them (and not just the top "
        },
        {
            "id": "035e5a9f-c61a-4037-900b-4ce71a6879b2",
            "type": "dql",
            "showTitle": false,
            "state": {
                "input": {
                    "value": "fetch spans, from: now() - 5m, scanLimitGBytes: 100\n| filter isNull(span.parent_id)\n| lookup [fetch spans, from: now() - 5m, scanLimitGBytes: 100\n  | filter isNotNull(http.url) AND isNotNull(k8s.namespace.name)\n  | summarize count(), alias: cnt, by: {http.url, k8s.namespace.name, trace.id}\n  ], sourceField: trace.id, lookupField: trace.id, prefix: \"look.\"\n| filter isNotNull(look.trace.id)\n| summarize count(), alias: cnt, by: {look.k8s.namespace.name}\n| filter  cnt > 10 AND cnt < 500\n| sort cnt desc",
                    "timeframe": {
                        "from": "now-30m",
                        "to": "now"
                    }
                },
                "visualizationSettings": {
                    "chartSettings": {
                        "gapPolicy": "connect"
                    },
                    "singleValue": {
                        "showLabel": true,
                        "label": "",
                        "autoscale": true
                    },
                    "table": {
                        "enableLineWrap": true,
                        "hiddenColumns": [],
                        "lineWrapIds": [],
                        "firstVisibleRowIndex": 0
                    }
                },
                "state": "success",
                "visualization": "categoricalBarChart",
                "davis": {
                    "includeLogs": true,
                    "isDavisVisualizationAvailable": true
                }
            },
            "height": 450,
            "davisAnalytics": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            },
            "davisAnalysis": {
                "analyzerComponentState": {
                    "resultState": {}
                }
            }
        },
        {
            "id": "9a61a783-0c6a-4d7a-808a-483d0e8f487e",
            "type": "markdown",
            "markdown": "# How can I put a specific MDA to my Dashboard? \n - Why do I need to define a metric first when I do not need the  data in the long run?\n - Why is that not working at all for OpenTelemetry?"
        }
    ]
}