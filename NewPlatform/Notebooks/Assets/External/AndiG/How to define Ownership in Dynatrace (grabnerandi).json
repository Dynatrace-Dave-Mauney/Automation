{
    "version": "5",
    "defaultTimeframe": {
        "from": "now-7d",
        "to": "now",
        "details": {
            "from": {
                "type": "expression",
                "normalized": "now-7d",
                "date": "2023-09-06T12:25:40.573Z"
            },
            "to": {
                "type": "expression",
                "normalized": "now",
                "date": "2023-09-13T12:25:40.573Z"
            }
        }
    },
    "sections": [
        {
            "id": "a5ccc628-7428-468f-8454-543025fb1665",
            "type": "markdown",
            "markdown": "# How to enable Release Observability with Dynatrace\nThis notebook provides best practices on using Dynatrace to provide release version and ownership visibility!\n\n**Got questions or feedback?**: [devrel@dynatrace.com](mailto:devrel@dynatrace.com?subject=Feedback%20on%20Release%20Validation)\n\n**Target Audience**: DevSecOps, Platform Engineers, SREs\n\n**Documentation on Release Management**\n* [Version detection strategies](https://www.dynatrace.com/support/help/platform-modules/cloud-automation/release-monitoring/version-detection-strategies)\n* [Ownership](https://www.dynatrace.com/support/help/manage/ownership)\n\nWhen providing release meta data the Dynatrace Release Inventory gives you easy access to your data by release\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/dynatrace-getting-started/main/images/howto_releaseobservability_releaseinventory.png)",
            "hasContent": true
        },
        {
            "id": "87219f8b-99bf-4b61-b5bf-d36fa31d3d6f",
            "type": "markdown",
            "markdown": "---"
        },
        {
            "id": "c550789b-34e2-43de-98f6-31640b085f4b",
            "type": "markdown",
            "markdown": "# Step 1: Adding Release Version Meta Data to your Deployments\nDynatrace uses built-in version detection strategies to support different technology standards for versioning. \nThe latest version detected can be influenced by environment variables, Kubernetes labels or by sending a deployment event.\n\n## Option 1: Providing Release Information as Environment Variables\nFor any process you can pass version relevant information as environment variables. This works for both Windows and Linux. For examples in the [doc](https://www.dynatrace.com/support/help/platform-modules/cloud-automation/release-monitoring/version-detection-strategies#environment-variables)\n\n```\nset DT_RELEASE_VERSION=2.23\nset DT_RELEASE_BUILD_VERSION=2023-09-13\nset DT_RELEASE_PRODUCT=hipstershop\nset DT_RELEASE_STAGE=production\n```\n\n## Option 2: Providing it as K8s Labels\nOn K8s Dynatrace can also extract this information from K8s labels as shown below. Additionally it is recommended to pass release version information as an enviornment-variable to the container. This allows Dynatrace to enrich captured distributed traces with version information on each trace!\n\nMore information in the [doc](https://www.dynatrace.com/support/help/platform-modules/cloud-automation/release-monitoring/version-detection-strategies#kubernetes).\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: production\n  name: adservice\nspec:\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: adservice\n        app.kubernetes.io/version: 2.23          // will be identified as version\n        app.kubernetes.io/part-of: hipstershop   // will be identified as product\n        dt.owner: team-ninja                     // will be identified as owner\n\n  ...\n  \n    spec:\n      containers:\n      - name: adservice\n        image: adservice:2.23\n        env:\n        - name: DT_RELEASE_VERSION               // propagates version information on distributed trace\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.labels['app.kubernetes.io/version'] \n  \n```\n\n## Option 3: Sending Deployment Events\nDynatrace also extracts version information through CUSTOM_DEPLOYMENT events that are sent to a Dynatrace Monitored entity. The mandatory field there is `dt.event.deployment.version`\nTypically those events are sent by the CI/CD pipeline tools (Jenkins, GitLab, GitHub, ...) after a new version was deployed!\nMore details on the [doc](https://www.dynatrace.com/support/help/platform-modules/cloud-automation/release-monitoring/version-detection-strategies#events-ingestion)\n\n```\n{\n  \"eventType\": \"CUSTOM_DEPLOYMENT\",\n  \"title\": \"Easytravel 1.1\",\n  \"entitySelector\": \"type(PROCESS_GROUP_INSTANCE),tag(easytravel)\",\n  \"properties\": {\n    \"dt.event.deployment.name\":\"Easytravel 1.1\",\n    \"dt.event.deployment.version\": \"1.1\",\n    \"dt.event.deployment.release_stage\": \"production\" ,\n    \"dt.event.deployment.release_product\": \"frontend\",\n    \"dt.event.deployment.release_build_version\": \"123\",\n    \"approver\": \"Jason Miller\",\n    \"dt.event.deployment.ci_back_link\": \"https://pipelines/easytravel/123\",\n    \"gitcommit\": \"e5a6baac7eb\",\n    \"change-request\": \"CR-42\",\n    \"dt.event.deployment.remediation_action_link\": \"https://url.com\",\n    \"dt.event.is_rootcause_relevant\": true\n  }\n}\n```"
        },
        {
            "id": "0a786b4f-1839-434b-989d-53e234e490b9",
            "type": "markdown",
            "markdown": "---"
        },
        {
            "id": "c0f65a02-1004-46cb-9197-b43af7111185",
            "type": "markdown",
            "markdown": "# Step 2: Release Inventory: Overview of all release versions\nThe [Release inventory](https://wkf10640.apps.dynatrace.com/ui/apps/dynatrace.classic.releases/ui/releases?gtf=-2h&gf=all&invsc=releaseName&invsd=asc) gives you an overview of all deployed releases on the observed environment. There is also a [Release inventory (demo mode)](https://wkf10640.apps.dynatrace.com/ui/apps/dynatrace.classic.releases/ui/releases?gtf=-2h&gf=all&invsc=releaseName&invsd=asc&demo=true) available that shows you how this screen looks like in case you have enriched your deployments with release information.\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/dynatrace-getting-started/main/images/howto_releaseobservability_releaseinventory.png)"
        },
        {
            "id": "ba631e03-e6ff-4fab-861b-01341d119efd",
            "type": "markdown",
            "markdown": "---"
        },
        {
            "id": "d3a15300-adbf-46e1-bf4a-c8115b6d5020",
            "type": "markdown",
            "markdown": "# Step 3: Query Release Information from Smartscape via DQL\nIts also possible to query release information directly via DQL from Smartscape entities\nThe following example shows getting a list of `process_group_instance` and the `app.kubernetes.io/version` tag\n\n```\nfetch dt.entity.process_group_instance\n| expand tags\n| parse tags, \"ld:key ':' ld:tag_value\"\n| filter contains(key, \"app.kubernetes.io/version\")\n| fields entity.name, tag_value \n```"
        }
    ]
}