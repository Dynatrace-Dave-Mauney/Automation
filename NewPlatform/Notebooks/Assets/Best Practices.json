{"version":"6","defaultTimeframe":{"from":"now()-2h","to":"now()"},"sections":[{"id":"0cf7a63f-844d-405f-8d2e-1ded26ea327b","type":"markdown","markdown":"# DQL Best practices\n\n[Full Documenation Page Here](https://docs.dynatrace.com/docs/shortlink/dql-best-practices)"},{"id":"0e9171bc-8e8d-496c-86e7-7a39bb99d29f","type":"markdown","markdown":"## Narrow the query time range\n\nA shorter analysis window provides better performance based on identical data sets. Use available timeframe selectors provided by the user interface or directly specify the query time range within the [fetch command](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands)."},{"id":"cb0e73fd-d885-4635-b50a-ab9537dea464","type":"dql","showTitle":false,"state":{"input":{"value":"fetch bizevents, from:-10m","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"7e3e4ef5-8019-4560-b6db-b88ab5c978d0","type":"markdown","markdown":"## Utilize available sampling options\n\nCurrently, sampling is applicable for Log data within the initial fetch pipeline statement. Depending on the specified value, a fraction (1/<samplingRatio>) of all available raw log records is returned.\n\nThe applicable value ranges for sampling are:\n\n* 1: Default value, resulting in no applied sampling.\n* 10\n* 100\n* 1000\n* 10000\n\nThe following query uses sampling to improve query performance to observe an approximation of error logs over time."},{"id":"20bee490-580c-4cec-a2e4-6684b432e26f","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs, from:-7d, samplingRatio:100\n| summarize c = countIf(loglevel == \"ERROR\"), by:bin(timestamp, 3h)\n| fieldsAdd c = c*100","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"9897b308-eece-4ea3-b287-378905d3dd1f","type":"markdown","markdown":"## Utilize options to limit the scanned amount of data\n\nParticularly when dealing with logs, a large amount of data is ingested in short periods. Even with a narrow query time range, a query can take considerable time to complete.\n\nTo stop reading data after a specified amount, use the scanLimitGBytes [fetch command](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands) optional parameter."},{"id":"736c0efb-abe0-4314-96a4-bc182f1d9ad5","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs, from:-2h, scanLimitGBytes:100","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"0c93b2ff-a20a-438c-8c46-d84be8293e0e","type":"markdown","markdown":"## Recommended order of commands\n\n**Recommended order of commands for non-aggregating queries:**\n\n1. Reduce the number of processed records by filtering the data using, for example, the filter or filterOut commands.\n2. Select the amount of processed data by selecting fields early using the fields, fieldsKeep, or fieldsRemove commands.\n3. Process the resulting dataset to achieve the required result set. Typically, non-transformative commands are used, such as fieldsAdd, parse, append.\n4. Sort the resulting records according to your priority\n5. Limit the final result set if applicable.\n\n**Recommended order of commands for aggregating queries:**\n\n1. Reduce the number of processed records by filtering the data using, for example, the filter or filterOut commands.\n2. Select the amount of processed data by selecting fields early using the fields, fieldsKeep, or fieldsRemove commands.\n3. Process the resulting dataset to achieve the required result set. Typically, non-transformative commands are used, such as fieldsAdd, parse, append.\n4. Aggregate your data set using the summarize command to create a tabular result and maketimeseries if a time chart is required. Don't use limit before aggregating the data to prevent wrong aggregates unless intended.\n5. Use non-transformative commands such as fields, fieldsKeep, or fieldsRemove, or continue filtering.\n6. sort and limit the aggregated data set after the aggregation stages.\n\n**Example**"},{"id":"90971a09-6601-4432-af9c-ee93c7421cc8","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter dt.entity.host == \"HOST-76FAA6DC0347DA12\" and matchesPhrase(content,\"failed to load\")\n| filterOut loglevel == \"NONE\"\n| fields timestamp, loglevel, content, dt.entity.process_group_instance\n| summarize count = countIf(loglevel==\"ERROR\"), by:{dt.entity.process_group_instance}\n| sort count desc\n| limit 5","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"7e5415ec-7876-47a1-9267-3d3f919a4b25","type":"markdown","markdown":"It is recommended to place sort at the end of the query. Sorting right after fetch, and continuing the query will reduce the query performance.\n\n**Examples**\n\nThis example show a query, where we put sort right after fetch.\n\nIt is recommended to place sort at the end of the query. Sorting right after fetch and then continuing the query will reduce the query performance. \n\nExample:"},{"id":"2817cda0-2641-4a43-be6a-7eaa3602cc62","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| sort timestamp desc\n| filter contains(content, \"Error\")","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"3dd70241-bd66-46f6-a392-dd7b57f10d6c","type":"markdown","markdown":"This example shows the recommended order of putting sort at the end of the query."},{"id":"35f02607-272a-4796-a8c7-a2665c555aeb","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter contains(content, \"Error\")\n| sort timestamp desc","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"6df2a31b-fb6c-4a5f-a377-41e6d2bded82","type":"markdown","markdown":"You can repeat the same command within one query and still stick to the recommended order. In the below example, you first filter the fetched content, then again you filter the parsed content, but the sort command and summarize function retain their positions:"},{"id":"51a19db7-bce8-41cf-94bf-91a021c41046","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter dt.entity.host == \"HOST-1\"\n  and dt.entity.process_group_instance == \"PROCESS_GROUP_INSTANCE-123AB35\"\n| parse content, \"ipaddr:ip ld ' POST ' ld:action ' HTTP/1.1 ' long:status ld\"\n| filter action == \"/cart\" or action == \"/cart/checkout\"\n| summarize count = count(), by:{ ip, log.source }\n| sort count desc","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"4444c4c6-333e-46ec-a924-ae29b943c425","type":"markdown","markdown":"## Filter early\n\nOverall query performance is greatly improved by narrowing the dataset before further processing. If applicable, segmenting data into [dedicated buckets](https://docs.dynatrace.com/docs/observe-and-explore/logs/lma-bucket-assignment) can be particularly effective.\n\n* Valid for all tables, filter on bucket."},{"id":"f59b6c1a-df48-47c5-b01f-06bb72f27c35","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter dt.system.bucket == \"custom_audit_log\"","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"0e8b93bb-6083-4a76-88f1-c2b3c1d9d953","type":"markdown","markdown":"* For business event queries, filter on any ingested field."},{"id":"6f8ac1ed-2d38-4509-8029-1b8b044ab155","type":"dql","showTitle":false,"state":{"input":{"value":"fetch bizevents\n| filter event.provider == \"www.easytrade.com\"","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"06ea92c8-8565-442f-a583-a10f02f6a3e2","type":"markdown","markdown":"* For log queries, filter on fields representing the topological context of your data."},{"id":"cedb9bfd-f483-4b64-8a2e-8b1d5ffbd710","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter k8s.container.name == \"coredns\"\n  and (loglevel != \"NONE\" or loglevel != \"INFO\")","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"870580f6-8f5a-43a2-aa4e-6eb887fa303a","type":"markdown","markdown":"## Commonly used fields within logs:\n\n* log.source\n* loglevel\n* host.name\n* dt.process.name\n* event.type\n* dt.kubernetes.cluster.name\n* k8s.namespace.name\n* k8s.deployment.name\n* k8s.container.name\n* k8s.pod.name\n* dt.host_group.id\n* dt.event.group_label\n* dt.entity.host\n* aws-log_group\n\nUse string comparisons with care\n\n* Use == or != whenever the value of a field is known."},{"id":"b534060f-5e49-417e-9a30-71cc86032c98","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter k8s.container.name == \"coredns\"\n  and (loglevel != \"NONE\" or loglevel != \"INFO\")","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"6cb54203-22be-48c8-b810-99840ca4d64f","type":"markdown","markdown":"* Use matchesPhrase() instead of contains() whenever the value of a field is only partly known or unknown."},{"id":"1440115d-de1b-409f-98af-9449027ba248","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| filter matchesPhrase(content,\"No files matching import\")","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"5d317c6f-f8b6-4091-9e25-1d50f5f9b56d","type":"markdown","markdown":"## Fields names to be avoided or used in backticks\n\nIt is not recommended to use the below eight reserved keywords as field identifiers (field names) or dimensions:\n\n* true\n* false\n* null\n* mod\n* and\n* or\n* xor\n* not\n\nHowever, you can still use these words as field names, identifiers and dimensions if you put them in backticks ('`')\n\nFor example, if you have a dimension named 'true':"},{"id":"d7042344-e23c-448e-98fd-b25aba0afe86","type":"dql","showTitle":false,"state":{"input":{"value":"...\n| fields x = true // creates a boolean field that is always true","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"5fdf48b0-57cc-48ea-845c-d02e4b630800","type":"dql","showTitle":false,"state":{"input":{"value":"...\n| sort `not` desc // sorts descending by a field named `not`","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","visualizationSettings":{}}},{"id":"4e7d49ae-678f-4652-8228-66f89c1e79d4","type":"markdown","markdown":"Related topics\n\n[Dynatrace Query Language](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language)\nHow to use Dynatrace Query Language.\n\n[How to use DQL queries](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/dql-guide)\nFind out how DQL works and what are DQL key concepts.\n\n[DQL compared to SQL and more](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/dql-comparison)\nSee how DQL compares to other query languages.\n\n[DQL language reference](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/dql-reference)\nDynatrace Query Language syntax reference.\n\n[DQL commands](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/commands)\nA list of DQL commands.\n\n[DQL Functions](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/functions)\nA list of DQL functions.\n\n[DQL operators](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/operators)\nA list of DQL Operators.\n\n[DQL data types](https://docs.dynatrace.com/docs/platform/grail/dynatrace-query-language/data-types)\nA list of DQL data types."}]}