{"version":"5","defaultTimeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}},"sections":[{"id":"6eaccb48-2d6a-426a-8f17-e405fa244c7c","type":"markdown","markdown":"## 1.1 How to write cost-efficient queries?\n\nPlease keep in mind that following points need to be considered in terms of query performance (-> cost reduction) - [doc](https://www.dynatrace.com/support/help/shortlink/dql-best-practices):\n\n- Narrow the query time range\n- Utilize available sampling options (1-default,10,100,1000,10000)\n- Utilize scanLimitGBytes property (500-default, -1 for scanning all data in the query time range)\n- Usage of the limit command (default limit=1000 records in the resultset; after a summarize a limit usually does not do anything)\n- Filter on high-cardinality dimensions as soon as possible: log.source, dt.entity.process_group_instance, etc.\n- Create and filter for buckets (max. 80 buckets per tenant) [doc](https://www.dynatrace.com/support/help/shortlink/lma-bucket-assignment#custom-log-buckets)\n\nUse the info symbol in the result of an executed query to inspect and control the scanned bytes value."},{"id":"d4a2669b-25e7-4bc4-96ea-4f65b48c0185","type":"dql","showTitle":false,"state":{"input":{"value":"// Example usage of recommendations\n\n// utilize sampling, scanlimit\nfetch logs, samplingRatio:100, scanLimitGBytes:1\n\n// select a bucket if configured (for this demo example the default log bucket is used)\n| filter dt.system.bucket==\"default_logs\"\n\n// utilize filter on high cardinality dimension\n| filter log.source == \"/var/log/messages\"\n\n// process/output the data....\n| fields timestamp, content, log.source, dt.system.sampling_ratio","timeframe":{"from":"now-10m","to":"now","details":{"from":{"type":"expression","normalized":"now-10m","date":"2023-10-17T06:19:28.229Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:29:28.229Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"908c5949-2d46-4156-b4ab-44601a13f54f","type":"markdown","markdown":"## 1.2 How to gather metadata for the different tables (logs, events, ..., ...)?"},{"id":"ca8a699a-a7de-4735-b84c-99cd0a4653f5","type":"dql","showTitle":false,"state":{"input":{"value":"// get entity fields - also works with logs/events\ndescribe dt.entity.host","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"dd8436a7-9f2c-4c0c-80a6-5fbf6f4afba3","type":"dql","showTitle":false,"state":{"input":{"value":"// get log fields - also works with fetch events\nfetch logs\n| limit 1\n| fields dt.system.dimensions","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"7615afe6-2491-47e9-8ad6-1a53fde1cadf","type":"dql","showTitle":false,"state":{"input":{"value":"// see which records types exist (logs, bizevents, dt.entity.hosts, ...)\nfetch recordtypes","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoryOverrides":{}},"singleValue":{"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle","davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"0d3d24e1-a53a-464f-a37e-dc39f7b5dafe","type":"markdown","markdown":"## 1.2 Shortcuts for Notebooks app\n\n`CTRL + /` ---> Toggle comment // for entire line (also for multi-line selection)\n\n`SHIFT + ALT + DOWN or UP Arrow` ---> Duplicate selected code lines (also for multi-line selection)\n\n`CTRL + X` ---> Cut entire line. Cursor can be located anywhere in line (multiple characters not selected). Line can then be pasted. This shortcut can also be used to delete an entire line quickly.\n\n`CTRL + C` ---> Copy entire line. Cursor can be located anywhere in line (multiple characters not selected). Line can then be pasted.\n\n`TAB ---> (1)` Multi-select lines - (2) TAB will indent all selected lines forward (add 2 whitespace characters at the beginning of each line)\n\n`TAB + SHIFT` ---> (1) Multi-select lines - (2) TAB + SHIFT will indent all selected lines backwards (remove 2 whitespace characters from the beginning of each line)\n\n`Ctrl + ALT + UP/DOWN` ---> move a section UP or DOWN\n\n`Ctrl + Space` ---> Open autocomplete\n\n`Escape` ---> Close autocomplete; move focus out of Editor\n\n`Ctrl + Left/Right` ---> Move cursor to previous/next word\n\n`Ctrl + Z / Y` ---> Undo/redo\n\n`Ctrl + 7` ---> Toggle line comment\n\n`Shift + Alt + A` ---> Toggle block comment on selected lines\n\n`Ctrl + Backspace` ---> Delete word"},{"id":"e3739d99-8ce3-4729-8f00-95cf21ef5748","type":"markdown","markdown":"## 2. How to fetch timeseries (formerly known as metrics)"},{"id":"6b7426e3-4ab7-46ce-ae35-a14027fc65c5","type":"markdown","markdown":"Check the [doc](https://www.dynatrace.com/support/help/shortlink/built-in-metrics-on-grail)\n\nBuilt-in metrics:\nbuiltin:host.cpu.usage -> dt.host.cpu.usage\n\nExtension metrics (camelCase to snake_case):\next:cloud.aws.dx.connectionErrorCount -> cloud.aws.dx.connection_error_count"},{"id":"21a5e523-a622-4c1c-a54b-a2881cb0ce00","type":"markdown","markdown":"#### Average CPU by host, limit to top 3 hosts"},{"id":"4147a6ec-ba18-4b1b-ab67-de761fd47d82","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries usage=avg(dt.host.cpu.usage), by:dt.entity.host\n| sort arrayAvg(usage) desc\n| limit 3 ","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"48c37052-1cbe-479a-b051-7ad037883751","type":"markdown","markdown":"#### Top 10 hosts with highest CPU, table output"},{"id":"dc9f08fd-00c0-4553-84eb-d8cb43cea239","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries usage=avg(dt.host.cpu.usage), by:dt.entity.host\n| sort arrayAvg(usage) desc\n| limit 10\n| fields dt.entity.host, usage=arrayAvg(usage)","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"771826cb-0a61-4ae5-9cff-7c7ce40eb635","type":"markdown","markdown":"#### Disk write bytes per second\nLine graph per host and disk, for hosts tagged with \"Azure:VM\""},{"id":"df95ef58-300f-4013-9b9c-318c6cfbbe34","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries bytes_written=sum(dt.host.disk.bytes_written),\n  by:{dt.entity.host, dt.entity.disk},\n  filter: dt.entity.host in [\n    fetch dt.entity.host | filter matchesValue(tags, \"Azure:VM\") | fields id\n  ]\n| filter arraySum(bytes_written) > 0\n| fields dt.entity.host, dt.entity.disk, bytes_written, interval, timeframe","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"c519e95f-d9c0-4602-8d9f-b543df452470","type":"markdown","markdown":"#### Math between metrics, identical filter and group by\n"},{"id":"26f3fac4-838f-4871-8a5a-f77d6a7ffcfb","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries cpu_allocatable=avg(dt.kubernetes.node.cpu_allocatable),\n  requests_cpu=avg(dt.kubernetes.node.requests_cpu),\n  by:dt.entity.kubernetes_node,\n  filter:k8s.cluster.name == \"alfa\"\n| fieldsAdd cpu_available=cpu_allocatable[]-requests_cpu[]\n| fields dt.entity.kubernetes_node, cpu_available_m_cores=arrayLast(cpu_available)","timeframe":{"from":"now-3m","to":"now","details":{"from":{"type":"expression","normalized":"now-3m","date":"2023-10-16T13:24:18.765Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-16T13:27:18.765Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"2336ef32-f64e-4d91-b918-b9680093721a","type":"markdown","markdown":"#### Forecast metric values"},{"id":"567325a3-30c4-4f0c-b6ac-923f2cf5807c","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries avg(sim.seasonal)\n| fields `avg(sim.seasonal)`, `interval`, `timeframe`","timeframe":{"from":"now-132h","to":"now","details":{"from":{"type":"expression","normalized":"now-132h","date":"2023-10-11T01:39:24.851Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-16T13:39:24.851Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"50b2bfbc-48a5-47bb-a9eb-2c846d05af40","type":"markdown","markdown":"#### Create a metric representation based on log events or biz events like so:"},{"id":"30de571d-f43d-4923-8a52-f7294ca45cd3","type":"dql","showTitle":false,"state":{"input":{"value":"fetch logs\n| makeTimeseries count(), by:loglevel, interval:2h, default:0","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-15T13:44:22.402Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-16T13:44:22.402Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"67ebea03-0058-4b24-ad8a-55364bd0ba84","type":"dql","showTitle":false,"state":{"input":{"value":"// Another example showing the parsing possibility of log content\ndata record(timestamp=now()-1m, severity=\"INFO\", content=\"The number of used connections amounts to 30\"), \nrecord(timestamp=now()-4m, severity=\"INFO\", content=\"The number of used connections amounts to 22\"), \nrecord(timestamp=now()-5m, severity=\"INFO\", content=\"The number of used connections amounts to 17\"), \nrecord(timestamp=now()-7m, severity=\"INFO\", content=\"The number of used connections amounts to 12\"), \nrecord(timestamp=now()-9m, severity=\"INFO\", content=\"The number of used connections amounts to 31\")\n| parse content, \"LD 'amounts to' SPACE? LONG:num_connections\"\n| makeTimeseries sum(num_connections)","timeframe":{"from":"now-10m","to":"now","details":{"from":{"type":"expression","normalized":"now-10m","date":"2023-10-17T06:19:28.229Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:29:28.229Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"64c6de5c-fd46-4999-bf02-5459c6ed288e","type":"markdown","markdown":"#### Create a metric representation based on logs while using a custom time dimension"},{"id":"b5753ca0-cf83-4ba8-859b-3586b21f25d9","type":"dql","showTitle":false,"state":{"input":{"value":"// use custom dimension as time dimension\ndata json:\"[\n    {\n      \\\"timestamp\\\": \\\"2023-10-11T14:21:55.027000000+02:00\\\",\n      \\\"content\\\": \\\"Exception: Custom error log sent via Generic Log Ingest\\\",\n      \\\"loglevel\\\": \\\"ERROR\\\",\n      \\\"custom.time\\\": \\\"2023-10-10T10:12:31.0000\\\"\n    },\n    {\n      \\\"timestamp\\\": \\\"2023-10-11T14:21:55.027000000+02:00\\\",\n      \\\"content\\\": \\\"Exception: Custom error log sent via Generic Log Ingest\\\",\n      \\\"loglevel\\\": \\\"WARNING\\\",\n      \\\"custom.time\\\": \\\"2023-10-11T10:12:31.0000\\\"\n    },\n    {\n      \\\"timestamp\\\": \\\"2023-10-11T14:21:55.027000000+02:00\\\",\n      \\\"content\\\": \\\"Exception: Custom error log sent via Generic Log Ingest\\\",\n      \\\"loglevel\\\": \\\"WARNING\\\",\n      \\\"custom.time\\\": \\\"2023-10-11T17:12:31.0000\\\"\n    }\n    ]\"\n| fieldsadd timestamp=toTimestamp(timestamp), custom.time=toTimestamp(custom.time)\n| makeTimeseries count(), by:loglevel, time:custom.time, interval:1d, default:0","timeframe":{"from":"2023-10-08T22:00:00.000Z","to":"2023-10-13T21:59:59.999Z","details":{"from":{"type":"iso8601","normalized":"2023-10-08T22:00:00.000Z","date":"2023-10-08T22:00:00.000Z"},"to":{"type":"iso8601","normalized":"2023-10-13T21:59:59.999Z","date":"2023-10-13T21:59:59.999Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"22242204-8a9c-4987-9d37-a3ebca3d187b","type":"markdown","markdown":"## How to query classic metrics? \n\nPlease be careful when using this approach (only if necessary), as upcoming changes may break the tiles."},{"id":"19e14efc-33b1-4c2d-942f-bf6966609339","type":"function","showTitle":false,"foldings":[],"state":{"input":{"value":"/*\n* This function will run in the DYNATRACE JavaScript runtime.\n* For information visit https://dt-url.net/functions-help\n*/\n// doc: https://developer.dynatrace.com/reference/sdks/client-classic-environment-v2/#query\nimport { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\nexport default async function() { \nconst resp = await metricsClient.query({\n  metricSelector: 'builtin:host.cpu.usage:splitBy(\\\"dt.entity.host\\\"):avg:sort(value(avg,descending)):limit(20)',//\"builtin:host.cpu.usage:splitBy()\",\n  resolution: \"m\",\n  from: \"now-10m\",\n  to: \"now\",\n  acceptType: \"application/json; charset=utf-8\"\n});\n  \n  let resultfinal = [];\n  \n  for (let i=0;i< resp.result[0].data[0].timestamps.length; i++) {\n    \n    resultfinal.push({\n      \"timestamp\": new Date(resp.result[0].data[0].timestamps[i]).toISOString(),\n      \"value\" : resp.result[0].data[0].values[i]\n    });\n  }\n  \n  return resultfinal;\n}","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true}}},{"id":"51ad8bb9-ba52-4ba3-8b34-f0ce83dab980","type":"function","showTitle":false,"foldings":[],"state":{"input":{"value":"// doc: https://developer.dynatrace.com/reference/sdks/client-classic-environment-v2/#query\nimport {\n  metricsClient\n} from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function() {\n  const serviceName = `easyTravel Customer Frontend`;\n  // avg response time\n  const avgSelector = `builtin:service.response.time:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"${serviceName}~\")\"))))):splitBy():avg:sort(value(avg,descending))`\n  const avgConfig = {\n    acceptType: \"application/json; charset=utf-8\",\n    metricSelector: avgSelector\n  };\n  const avgPromise = metricsClient.query(avgConfig);\n  // max response time\n  const maxSelector = `builtin:service.response.time:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"${serviceName}~\")\"))))):splitBy():max:sort(value(max,descending))`\n  const maxConfig = {\n    acceptType: \"application/json; charset=utf-8\",\n    metricSelector: maxSelector\n  };\n  const maxPromise = metricsClient.query(maxConfig);\n  // 90 percentile response time\n  const pct90Selector = `builtin:service.response.time:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"${serviceName}~\")\"))))):splitBy():percentile(90.0):sort(value(percentile(90.0),descending))`\n  const pct90Config = {\n    acceptType: \"application/json; charset=utf-8\",\n    metricSelector: pct90Selector\n  };\n  const pct90Promise = metricsClient.query(pct90Config);\n  // Fetch the data\n  const [avgObjects, maxObjects, pct90Objects] = await Promise.all([avgPromise, maxPromise, pct90Promise]);\n  //Transform results for line graph\n  const results = [];\n  // response times are in microseconds\n  for (let i = 0; i < avgObjects.result[0].data[0].timestamps.length; i++) {\n    results.push({\n      \"timestamp\": new Date(avgObjects.result[0].data[0].timestamps[i]).toISOString(),\n      \"Response time (avg)\": avgObjects.result[0].data[0].values[i] / 1e6\n    });\n/**    results.push({\n      \"timestamp\": new Date(maxObjects.result[0].data[0].timestamps[i]).toISOString(),\n      \"Response time (max)\": maxObjects.result[0].data[0].values[i] / 1e6\n    }); **/\n    results.push({\n      \"timestamp\": new Date(pct90Objects.result[0].data[0].timestamps[i]).toISOString(),\n      \"Response time (90%)\": pct90Objects.result[0].data[0].values[i] / 1e6\n    });\n  }\n  return results;\n}","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true}}},{"id":"65904894-02f4-4cb1-bbad-4eea76fda979","type":"markdown","markdown":"## 3. How to fetch events"},{"id":"24ec5335-ca70-407a-b83a-6aa870610ca8","type":"dql","showTitle":false,"state":{"input":{"value":"// understand event kinds, categories and status\nfetch events, from:-6h\n| summarize count(), by:{event.kind, event.category, event.status}","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"13c10655-0f6e-4644-a8ba-aec890156a5d","type":"markdown","markdown":"#### Get problems that had a duration for longer than 10 minutes\n\n\nThere was a recent [change](https://www.dynatrace.com/support/help/shortlink/release-notes-saas-sprint-274#breaking-changes) from milliseconds to nanoseconds"},{"id":"b3002560-db40-44b8-8ccf-2c07a213a92a","type":"dql","showTitle":false,"state":{"input":{"value":"fetch events\n| filter event.kind == \"DAVIS_PROBLEM\"\n| filter event.status == \"CLOSED\"\n\n// Merged problems are flagged with the dt.davis.is_duplicate field \n// -> Problems that were merged into other problems are flagged with dt.davis.is_duplicate == true -> we want to exclude them\n// Therefore, we include a filter that ensures the records are flagged with false regarding duplicates (dt.davis.is_duplicate).\n| filter dt.davis.is_duplicate == false\n\n// convert nanoseconds to minutes\n| fieldsAdd problemduration_minutes = ((((resolved_problem_duration/1000)/1000)/1000)/60)\n\n// filter for the duration\n| filter (toLong(problemduration_minutes) > 30)\n\n// summarize the duplicate problem entries (every status change is logged as an event - e.g. OPEN -> CLOSE)\n| summarize average_problemduration_minutes=avg(toLong(problemduration_minutes)), by:{display_id}\n\n// sort by duration\n| sort average_problemduration_minutes DESC","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"1ee2bc09-7e6a-4d01-890d-434b2321d5ac","type":"markdown","markdown":"## 3. How to fetch entities and filter by relationships?"},{"id":"1f01498c-2c5d-459c-b3dd-6d6118060992","type":"dql","showTitle":false,"state":{"input":{"value":"// understand the available fields and data types\ndescribe dt.entity.service  ","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}},{"id":"3d516f24-0bbd-4546-bf9a-3eefc6d4fdca","type":"markdown","markdown":"Fetch all services that service easyTravel Customer Frontend calls."},{"id":"c033623c-2400-476a-8691-e6beed9f5eb4","type":"dql","showTitle":false,"state":{"input":{"value":"// fetch service entities and the required fields for the analysis\nfetch dt.entity.service  \n| fields entity.name, id, calls\n\n// filter by name\n| filter entity.name == \"easyTravel Customer Frontend\"\n\n// filter by id - as we have duplicate service names\n| filter id == \"SERVICE-61BED6683B252ACA\"\n\n// expand an array into individual records \n| expand calls_service=calls[dt.entity.service]\n\n// add the service name to the called services\n| lookup [fetch dt.entity.service], sourceField:calls_service, lookupField:id\n\n// remove fields not necessary for the output\n| fieldsRemove id, calls, lookup.id\n\n// from here you may add further lookups - e.g. the metric/event/log data for the services called\n// lookup enable a to 1 relationship (good for adding metadata, single values, etc.)\n// a join for adding multipe values is currently on the roadmap","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-10-16T06:55:43.990Z"},"to":{"type":"expression","normalized":"now","date":"2023-10-17T06:55:43.990Z"}}}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"includeLogs":true,"isDavisVisualizationAvailable":true,"davisVisualization":{}}}}]}