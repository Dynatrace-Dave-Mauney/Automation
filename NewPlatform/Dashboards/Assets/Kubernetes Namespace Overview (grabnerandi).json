{
    "version": 11,
    "variables": [
        {
            "key": "cluster",
            "type": "query",
            "input": "fetch dt.entity.kubernetes_cluster\n| sort lower(entity.name) asc\n| fields entity.name\n| LIMIT 25",
            "multiple": false
        },
        {
            "key": "namespace",
            "type": "query",
            "input": "fetch dt.entity.cloud_application_namespace\n| filterOut matchesPhrase(entity.name, \"openshift*\")\n| filterOut matchesPhrase(entity.name, \"kube*\")\n| sort lower(entity.name) asc\n| fields entity.name\n| LIMIT 50",
            "multiple": false
        }
    ],
    "tiles": {
        "15": {
            "type": "data",
            "title": "Running Pods",
            "query": "timeseries max(dt.kubernetes.pods), alias: pods, by: {k8s.workload.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace AND pod_phase == \"Running\" AND pod_condition == \"Ready\"\n| summarize pods = sum(arrayLast(pods))",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": false
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                },
                "unitsOverrides": [
                    {
                        "identifier": "dt.kubernetes.pods",
                        "base": "unspecified",
                        "unit": "count",
                        "display": null
                    }
                ]
            }
        },
        "16": {
            "type": "data",
            "title": "Container CPU Usage",
            "query": "timeseries avg(dt.containers.cpu.usage_percent), alias: cpu, by: {dt.entity.container_group_instance}\n| lookup [fetch dt.entity.container_group_instance\n  | fieldsAdd namespace = belongs_to[dt.entity.cloud_application_namespace]\n  | lookup [fetch dt.entity.cloud_application_namespace\n    | filter entity.name == $namespace\n    | fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n    | lookup [fetch dt.entity.kubernetes_cluster\n      | filter entity.name == $cluster]\n      ,sourceField: cluster, lookupField: id, prefix: \"cluster.\"]\n    , sourceField: namespace, lookupField: id, prefix: \"namespace.\"\n    | filter namespace.cluster == namespace.cluster.id\n  | filter namespace == namespace.id],sourceField: dt.entity.container_group_instance, lookupField: id, prefix: \"container.\"\n| filterOut isNull(container.id)\n| fields cpu, container.entity.name, alias: container, timeframe, interval",
            "visualization": "lineChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    },
                    "leftYAxisSettings": {
                        "label": "",
                        "min": 0,
                        "max": 100
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                },
                "unitsOverrides": [
                    {
                        "identifier": "dt.containers.cpu.usage_percent",
                        "base": "percentage",
                        "unit": "percent",
                        "display": null
                    }
                ]
            }
        },
        "17": {
            "type": "data",
            "title": "Container Mem Usage",
            "query": "timeseries avg(dt.containers.memory.usage_percent), alias: mem, by: {dt.entity.container_group_instance}\n| lookup [fetch dt.entity.container_group_instance\n  | fieldsAdd namespace = belongs_to[dt.entity.cloud_application_namespace]\n  | lookup [fetch dt.entity.cloud_application_namespace\n    | filter entity.name == $namespace\n    | fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n    | lookup [fetch dt.entity.kubernetes_cluster\n      | filter entity.name == $cluster]\n      ,sourceField: cluster, lookupField: id, prefix: \"cluster.\"]\n    , sourceField: namespace, lookupField: id, prefix: \"namespace.\"\n    | filter namespace.cluster == namespace.cluster.id\n  | filter namespace == namespace.id],sourceField: dt.entity.container_group_instance, lookupField: id, prefix: \"container.\"\n| filterOut isNull(container.id)\n| fields mem, container.entity.name, alias: container, timeframe, interval",
            "visualization": "lineChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    },
                    "leftYAxisSettings": {
                        "label": "",
                        "min": 0,
                        "max": 100
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                },
                "unitsOverrides": [
                    {
                        "identifier": "dt.containers.memory.usage_percent",
                        "base": "percentage",
                        "unit": "percent",
                        "display": null
                    }
                ]
            }
        },
        "19": {
            "type": "data",
            "title": "Container CPU Limits",
            "query": "timeseries avg(dt.containers.cpu.limit), alias: cpu, by: {dt.entity.container_group_instance}\n| lookup [fetch dt.entity.container_group_instance\n  | fieldsAdd namespace = belongs_to[dt.entity.cloud_application_namespace]\n  | lookup [fetch dt.entity.cloud_application_namespace\n    | filter entity.name == $namespace\n    | fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n    | lookup [fetch dt.entity.kubernetes_cluster\n      | filter entity.name == $cluster]\n      ,sourceField: cluster, lookupField: id, prefix: \"cluster.\"]\n    , sourceField: namespace, lookupField: id, prefix: \"namespace.\"\n    | filter namespace.cluster == namespace.cluster.id\n  | filter namespace == namespace.id],sourceField: dt.entity.container_group_instance, lookupField: id, prefix: \"container.\"\n| filterOut isNull(container.id)\n| fields cpu, container.entity.name, alias: container, timeframe, interval",
            "visualization": "lineChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "20": {
            "type": "data",
            "title": "Desired Pods",
            "query": "timeseries max(dt.kubernetes.workload.pods_desired), alias: pods, by: {k8s.workload.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n| summarize pods = sum(arrayLast(pods))",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": false
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                },
                "unitsOverrides": [
                    {
                        "identifier": "dt.kubernetes.workload.pods_desired",
                        "base": "unspecified",
                        "unit": "count",
                        "display": null
                    }
                ]
            }
        },
        "21": {
            "type": "data",
            "title": "Unhealthy Pods",
            "query": "timeseries max(dt.kubernetes.pods), alias: pods, by: {k8s.workload.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace AND (pod_phase != \"Running\" OR pod_condition != \"Ready\")\n| summarize pods = sum(arrayLast(pods))",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": false
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                },
                "unitsOverrides": [
                    {
                        "identifier": "dt.kubernetes.pods",
                        "base": "unspecified",
                        "unit": "count",
                        "display": null
                    }
                ]
            }
        },
        "22": {
            "type": "data",
            "title": "Container Mem Limits",
            "query": "timeseries avg(dt.containers.memory.limit_bytes), alias: mem, by: {dt.entity.container_group_instance}\n| lookup [fetch dt.entity.container_group_instance\n  | fieldsAdd namespace = belongs_to[dt.entity.cloud_application_namespace]\n  | lookup [fetch dt.entity.cloud_application_namespace\n    | filter entity.name == $namespace\n    | fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n    | lookup [fetch dt.entity.kubernetes_cluster\n      | filter entity.name == $cluster]\n      ,sourceField: cluster, lookupField: id, prefix: \"cluster.\"]\n    , sourceField: namespace, lookupField: id, prefix: \"namespace.\"\n    | filter namespace.cluster == namespace.cluster.id\n  | filter namespace == namespace.id],sourceField: dt.entity.container_group_instance, lookupField: id, prefix: \"container.\"\n| filterOut isNull(container.id)\n| fields mem, container.entity.name, alias: container, timeframe, interval",
            "visualization": "lineChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "23": {
            "type": "data",
            "title": "Workload CPU Requests",
            "query": "timeseries avg(dt.kubernetes.workload.requests_cpu), alias: cpu, by: {k8s.workload.name}, filter: k8s.cluster.name ==$cluster AND k8s.namespace.name == $namespace",
            "visualization": "lineChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "24": {
            "type": "data",
            "title": "Workload Mem Requests",
            "query": "timeseries avg(dt.kubernetes.workload.requests_memory), alias: mem, by: {k8s.workload.name}, filter: k8s.cluster.name ==$cluster AND k8s.namespace.name == $namespace",
            "visualization": "lineChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "25": {
            "type": "data",
            "title": "Container Restarts",
            "query": "timeseries sum(dt.kubernetes.container.restarts), alias: restarts, by: {k8s.container.name, k8s.workload.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n| fields restarts = arraySum(restarts), k8s.container.name, k8s.workload.name, timeframe, interval",
            "visualization": "categoricalBarChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "categoricalBarChartSettings": {
                        "layout": "horizontal"
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "26": {
            "type": "data",
            "title": "Namespace CPU Quota - Requests",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.requests_cpu), alias: requests_cpu, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = arrayLast(requests_cpu), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"requests_cpu.\"\n| fields requests_cpu.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "millicores",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "27": {
            "type": "data",
            "title": "Namespace CPU Quota - Requests Used",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster\n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.requests_cpu_used), alias: requests_cpu_used, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = arrayLast(requests_cpu_used), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"requests_cpu_used.\"\n| fields requests_cpu_used.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "millicores",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "28": {
            "type": "data",
            "title": "Namespace CPU Quota - Limits",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.limits_cpu), alias: limits_cpu, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = arrayLast(limits_cpu), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"limits_cpu.\"\n| fields limits_cpu.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "millicores",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "29": {
            "type": "data",
            "title": "Namespace CPU Quota - Limits Used",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.limits_cpu_used), alias: limits_cpu_used, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = arrayLast(limits_cpu_used), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"limits_cpu_used.\"\n| fields limits_cpu_used.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "millicores",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "30": {
            "type": "data",
            "title": "Namespace Memory Quota - Requests",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.requests_memory), alias: requests_memory, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = (arrayLast(requests_memory) / power(1024,2)), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"requests_memory.\"\n| fields requests_memory.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "megabytes",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "31": {
            "type": "data",
            "title": "Namespace Memory Quota - Requests Used",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.requests_memory_used), alias: requests_memory_used, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = (arrayLast(requests_memory_used) / power(1024,2)), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"requests_memory_used.\"\n| fields requests_memory_used.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "megabytes",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "32": {
            "type": "data",
            "title": "Namespace Memory Quota - Limits",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.limits_memory), alias: limits_memory, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = (arrayLast(limits_memory) / power(1024,2)), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"limits_memory.\"\n| fields limits_memory.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "megabytes",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "33": {
            "type": "data",
            "title": "Namespace Memory Quota - Limits Used",
            "query": "fetch dt.entity.cloud_application_namespace\n| filter entity.name == $namespace\n| fieldsAdd cluster = clustered_by[dt.entity.kubernetes_cluster]\n| lookup [fetch dt.entity.kubernetes_cluster | filter entity.name == $cluster \n  | fields id, entity.name], sourceField: cluster, lookupField: id, prefix: \"cluster.\"\n| lookup [timeseries max(dt.kubernetes.resourcequota.limits_memory_used), alias: limits_memory_used, by: {k8s.namespace.name}, filter: k8s.cluster.name == $cluster AND k8s.namespace.name == $namespace\n  | fields last = (arrayLast(limits_memory_used) / power(1024,2)), k8s.namespace.name], sourceField: entity.name, lookupField: k8s.namespace.name, prefix: \"limits_memory_used.\"\n| fields limits_memory_used.last",
            "visualization": "singleValue",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "megabytes",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "34": {
            "type": "data",
            "title": "Events by Status",
            "query": "fetch logs\n| filter event.type == \"K8S\" AND matchesValue(dt.kubernetes.cluster.name,$cluster) AND matchesValue(k8s.namespace.name,$namespace)\n| summarize events = count(), by: {loglevel}",
            "visualization": "categoricalBarChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "seriesOverrides": [
                        {
                            "seriesId": "WARN_events",
                            "override": {
                                "color": {
                                    "Default": "var(--dt-colors-charts-categorical-color-14-default, #ec5413)",
                                    "Hover": "var(--dt-colors-charts-categorical-color-14-hover, #bd430f)",
                                    "Active": "var(--dt-colors-charts-categorical-color-14-active, #8e320b)",
                                    "DefaultTransparent": "var(--dt-colors-charts-categorical-color-14-default-transparent, #d54c00cc)",
                                    "HoverTransparent": "var(--dt-colors-charts-categorical-color-14-hover-transparent, #963c00cc)",
                                    "ActiveTransparent": "var(--dt-colors-charts-categorical-color-14-active-transparent, #5a2800cc)"
                                }
                            }
                        },
                        {
                            "seriesId": "INFO_events",
                            "override": {
                                "color": {
                                    "Default": "var(--dt-colors-charts-categorical-color-11-default, #008fdb)",
                                    "Hover": "var(--dt-colors-charts-categorical-color-11-hover, #0071ad)",
                                    "Active": "var(--dt-colors-charts-categorical-color-11-active, #005685)",
                                    "DefaultTransparent": "var(--dt-colors-charts-categorical-color-11-default-transparent, #0074cbcc)",
                                    "HoverTransparent": "var(--dt-colors-charts-categorical-color-11-hover-transparent, #004e86cc)",
                                    "ActiveTransparent": "var(--dt-colors-charts-categorical-color-11-active-transparent, #002940cc)"
                                }
                            }
                        }
                    ],
                    "legend": {
                        "hidden": true
                    },
                    "categoricalBarChartSettings": {
                        "layout": "horizontal",
                        "scale": "absolute",
                        "categoryAxis": "loglevel",
                        "categoryAxisLabel": "loglevel",
                        "valueAxis": "events",
                        "valueAxisLabel": "events"
                    },
                    "colorPalette": "log-level"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "rowDensity": "condensed",
                    "enableSparklines": false,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "35": {
            "type": "data",
            "title": "Events by Workload",
            "query": "fetch logs\n| filter event.type == \"K8S\" AND matchesValue(dt.kubernetes.cluster.name,$cluster) AND matchesValue(k8s.namespace.name,$namespace)\n| summarize events = count(), by: {bin(timestamp,5m), alias: timestamp,loglevel,dt.kubernetes.workload.name}",
            "visualization": "barChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "36": {
            "type": "data",
            "title": "Events by Category",
            "query": "fetch logs\n| filter event.type == \"K8S\" AND matchesValue(dt.kubernetes.cluster.name,$cluster) AND matchesValue(k8s.namespace.name,$namespace)\n| summarize events = count(), by: {bin(timestamp,5m), alias: timestamp,loglevel,dt.event.group_label}",
            "visualization": "barChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "legend": {
                        "hidden": true
                    }
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        },
        "37": {
            "type": "data",
            "title": "Recent Events (25)",
            "query": "fetch logs\n| filter event.type == \"K8S\" AND matchesValue(dt.kubernetes.cluster.name,$cluster) AND matchesValue(k8s.namespace.name,$namespace)\n| fields timestamp, status, content, dt.kubernetes.event.involved_object.name, alias: object, dt.kubernetes.event.involved_object.kind, alias: object_kind, dt.event.group_label, alias: group_label\n| sort timestamp desc\n| LIMIT 25",
            "visualization": "table",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": [
                        [
                            "content"
                        ]
                    ]
                }
            }
        },
        "38": {
            "type": "data",
            "title": "Events by Object",
            "query": "fetch logs\n| filter event.type == \"K8S\" AND matchesValue(dt.kubernetes.cluster.name,$cluster) AND matchesValue(k8s.namespace.name,$namespace)\n| summarize events = count(), by: {dt.kubernetes.event.involved_object.name, alias: object}",
            "visualization": "donutChart",
            "visualizationSettings": {
                "chartSettings": {
                    "gapPolicy": "connect",
                    "seriesOverrides": [
                        {
                            "seriesId": "WARN_events",
                            "override": {
                                "color": {
                                    "Default": "var(--dt-colors-charts-categorical-color-14-default, #ec5413)",
                                    "Hover": "var(--dt-colors-charts-categorical-color-14-hover, #bd430f)",
                                    "Active": "var(--dt-colors-charts-categorical-color-14-active, #8e320b)",
                                    "DefaultTransparent": "var(--dt-colors-charts-categorical-color-14-default-transparent, #d54c00cc)",
                                    "HoverTransparent": "var(--dt-colors-charts-categorical-color-14-hover-transparent, #963c00cc)",
                                    "ActiveTransparent": "var(--dt-colors-charts-categorical-color-14-active-transparent, #5a2800cc)"
                                }
                            }
                        },
                        {
                            "seriesId": "INFO_events",
                            "override": {
                                "color": {
                                    "Default": "var(--dt-colors-charts-categorical-color-11-default, #008fdb)",
                                    "Hover": "var(--dt-colors-charts-categorical-color-11-hover, #0071ad)",
                                    "Active": "var(--dt-colors-charts-categorical-color-11-active, #005685)",
                                    "DefaultTransparent": "var(--dt-colors-charts-categorical-color-11-default-transparent, #0074cbcc)",
                                    "HoverTransparent": "var(--dt-colors-charts-categorical-color-11-hover-transparent, #004e86cc)",
                                    "ActiveTransparent": "var(--dt-colors-charts-categorical-color-11-active-transparent, #002940cc)"
                                }
                            }
                        }
                    ],
                    "legend": {
                        "hidden": true
                    },
                    "categoricalBarChartSettings": {
                        "layout": "horizontal",
                        "scale": "absolute"
                    },
                    "colorPalette": "categorical"
                },
                "singleValue": {
                    "showLabel": true,
                    "label": "",
                    "autoscale": true
                },
                "table": {
                    "enableLineWrap": true,
                    "hiddenColumns": [],
                    "lineWrapIds": []
                }
            }
        }
    },
    "layouts": {
        "15": {
            "x": 0,
            "y": 0,
            "w": 4,
            "h": 6
        },
        "16": {
            "x": 4,
            "y": 0,
            "w": 10,
            "h": 6
        },
        "17": {
            "x": 14,
            "y": 0,
            "w": 10,
            "h": 6
        },
        "19": {
            "x": 4,
            "y": 6,
            "w": 10,
            "h": 6
        },
        "20": {
            "x": 0,
            "y": 6,
            "w": 4,
            "h": 6
        },
        "21": {
            "x": 0,
            "y": 12,
            "w": 4,
            "h": 6
        },
        "22": {
            "x": 14,
            "y": 6,
            "w": 10,
            "h": 6
        },
        "23": {
            "x": 4,
            "y": 12,
            "w": 10,
            "h": 6
        },
        "24": {
            "x": 14,
            "y": 12,
            "w": 10,
            "h": 6
        },
        "25": {
            "x": 0,
            "y": 18,
            "w": 4,
            "h": 6
        },
        "26": {
            "x": 4,
            "y": 18,
            "w": 5,
            "h": 3
        },
        "27": {
            "x": 4,
            "y": 21,
            "w": 5,
            "h": 3
        },
        "28": {
            "x": 9,
            "y": 18,
            "w": 5,
            "h": 3
        },
        "29": {
            "x": 9,
            "y": 21,
            "w": 5,
            "h": 3
        },
        "30": {
            "x": 14,
            "y": 18,
            "w": 5,
            "h": 3
        },
        "31": {
            "x": 14,
            "y": 21,
            "w": 5,
            "h": 3
        },
        "32": {
            "x": 19,
            "y": 18,
            "w": 5,
            "h": 3
        },
        "33": {
            "x": 19,
            "y": 21,
            "w": 5,
            "h": 3
        },
        "34": {
            "x": 0,
            "y": 24,
            "w": 4,
            "h": 6
        },
        "35": {
            "x": 4,
            "y": 24,
            "w": 10,
            "h": 6
        },
        "36": {
            "x": 14,
            "y": 24,
            "w": 10,
            "h": 6
        },
        "37": {
            "x": 4,
            "y": 30,
            "w": 20,
            "h": 7
        },
        "38": {
            "x": 0,
            "y": 30,
            "w": 4,
            "h": 7
        }
    }
}